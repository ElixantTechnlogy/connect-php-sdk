<?php
/**
 * V1ItemsApi
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Api;

use \SquareConnect\ApiClient;
use \SquareConnect\ApiException;
use \SquareConnect\Configuration;
use \SquareConnect\ObjectSerializer;

/**
 * V1ItemsApi Class Doc Comment
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1ItemsApi
{
    /**
     * API Client
     *
     * @var \SquareConnect\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \SquareConnect\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\SquareConnect\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \SquareConnect\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \SquareConnect\ApiClient $apiClient set the API client
     *
     * @return V1ItemsApi
     */
    public function setApiClient(\SquareConnect\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation adjustInventory
     *
     * Adjusts an item variation's current available inventory.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $variation_id The ID of the variation to adjust inventory information for. (required)
     * @param \SquareConnect\Model\V1AdjustInventoryRequest $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1InventoryEntry
     */
    public function adjustInventory($location_id, $variation_id, $body)
    {
        list($response) = $this->adjustInventoryWithHttpInfo($location_id, $variation_id, $body);
        return $response;
    }

    /**
     * Operation adjustInventoryWithHttpInfo
     *
     * Adjusts an item variation's current available inventory.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $variation_id The ID of the variation to adjust inventory information for. (required)
     * @param \SquareConnect\Model\V1AdjustInventoryRequest $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1InventoryEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function adjustInventoryWithHttpInfo($location_id, $variation_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling adjustInventory');
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variation_id when calling adjustInventory');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling adjustInventory');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/inventory/{variation_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                "{" . "variation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variation_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1InventoryEntry',
                '/v1/{location_id}/inventory/{variation_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1InventoryEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1InventoryEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation applyFee
     *
     * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $item_id The ID of the item to add the fee to. (required)
     * @param string $fee_id The ID of the fee to apply. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function applyFee($location_id, $item_id, $fee_id)
    {
        list($response) = $this->applyFeeWithHttpInfo($location_id, $item_id, $fee_id);
        return $response;
    }

    /**
     * Operation applyFeeWithHttpInfo
     *
     * Associates a fee with an item, meaning the fee is automatically applied to the item in Square Register.
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $item_id The ID of the item to add the fee to. (required)
     * @param string $fee_id The ID of the fee to apply. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyFeeWithHttpInfo($location_id, $item_id, $fee_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling applyFee');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling applyFee');
        }
        // verify the required parameter 'fee_id' is set
        if ($fee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fee_id when calling applyFee');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($fee_id !== null) {
            $resourcePath = str_replace(
                "{" . "fee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fee_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}/fees/{fee_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation applyModifierList
     *
     * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to apply. (required)
     * @param string $item_id The ID of the item to add the modifier list to. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function applyModifierList($location_id, $modifier_list_id, $item_id)
    {
        list($response) = $this->applyModifierListWithHttpInfo($location_id, $modifier_list_id, $item_id);
        return $response;
    }

    /**
     * Operation applyModifierListWithHttpInfo
     *
     * Associates a modifier list with an item, meaning modifier options from the list can be applied to the item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to apply. (required)
     * @param string $item_id The ID of the item to add the modifier list to. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyModifierListWithHttpInfo($location_id, $modifier_list_id, $item_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling applyModifierList');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling applyModifierList');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling applyModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCategory
     *
     * Creates an item category.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Category $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Category
     */
    public function createCategory($location_id, $body)
    {
        list($response) = $this->createCategoryWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createCategoryWithHttpInfo
     *
     * Creates an item category.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Category $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Category, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCategoryWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createCategory');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createCategory');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Category',
                '/v1/{location_id}/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Category', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Category', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createDiscount
     *
     * Creates a discount.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Discount $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Discount
     */
    public function createDiscount($location_id, $body)
    {
        list($response) = $this->createDiscountWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createDiscountWithHttpInfo
     *
     * Creates a discount.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Discount $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Discount, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDiscountWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createDiscount');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/discounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Discount',
                '/v1/{location_id}/discounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Discount', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Discount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createFee
     *
     * Creates a fee (tax).
     *
     * @param string $location_id The ID of the location to create a fee for. (required)
     * @param \SquareConnect\Model\V1Fee $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Fee
     */
    public function createFee($location_id, $body)
    {
        list($response) = $this->createFeeWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createFeeWithHttpInfo
     *
     * Creates a fee (tax).
     *
     * @param string $location_id The ID of the location to create a fee for. (required)
     * @param \SquareConnect\Model\V1Fee $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Fee, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFeeWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createFee');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createFee');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/fees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Fee',
                '/v1/{location_id}/fees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Fee', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Fee', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createItem
     *
     * Creates an item and at least one variation for it.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Item $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function createItem($location_id, $body)
    {
        list($response) = $this->createItemWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createItemWithHttpInfo
     *
     * Creates an item and at least one variation for it.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Item $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function createItemWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createItem');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createItem');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createModifierList
     *
     * Creates an item modifier list and at least one modifier option for it.
     *
     * @param string $location_id The ID of the location to create a modifier list for. (required)
     * @param \SquareConnect\Model\V1ModifierList $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierList
     */
    public function createModifierList($location_id, $body)
    {
        list($response) = $this->createModifierListWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createModifierListWithHttpInfo
     *
     * Creates an item modifier list and at least one modifier option for it.
     *
     * @param string $location_id The ID of the location to create a modifier list for. (required)
     * @param \SquareConnect\Model\V1ModifierList $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierList, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModifierListWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createModifierList');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierList',
                '/v1/{location_id}/modifier-lists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createModifierOption
     *
     * Creates an item modifier option and adds it to a modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1ModifierOption $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierOption
     */
    public function createModifierOption($location_id, $modifier_list_id, $body)
    {
        list($response) = $this->createModifierOptionWithHttpInfo($location_id, $modifier_list_id, $body);
        return $response;
    }

    /**
     * Operation createModifierOptionWithHttpInfo
     *
     * Creates an item modifier option and adds it to a modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1ModifierOption $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierOption, HTTP status code, HTTP response headers (array of strings)
     */
    public function createModifierOptionWithHttpInfo($location_id, $modifier_list_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createModifierOption');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling createModifierOption');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createModifierOption');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierOption',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierOption', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createPage
     *
     * Creates a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Page $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page
     */
    public function createPage($location_id, $body)
    {
        list($response) = $this->createPageWithHttpInfo($location_id, $body);
        return $response;
    }

    /**
     * Operation createPageWithHttpInfo
     *
     * Creates a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the location to create an item for. (required)
     * @param \SquareConnect\Model\V1Page $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPageWithHttpInfo($location_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createPage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createPage');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page',
                '/v1/{location_id}/pages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createVariation
     *
     * Creates an item variation for an existing item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The item&#39;s ID. (required)
     * @param \SquareConnect\Model\V1Variation $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Variation
     */
    public function createVariation($location_id, $item_id, $body)
    {
        list($response) = $this->createVariationWithHttpInfo($location_id, $item_id, $body);
        return $response;
    }

    /**
     * Operation createVariationWithHttpInfo
     *
     * Creates an item variation for an existing item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The item&#39;s ID. (required)
     * @param \SquareConnect\Model\V1Variation $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Variation, HTTP status code, HTTP response headers (array of strings)
     */
    public function createVariationWithHttpInfo($location_id, $item_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling createVariation');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling createVariation');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createVariation');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/variations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Variation',
                '/v1/{location_id}/items/{item_id}/variations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Variation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Variation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCategory
     *
     * Deletes an existing item category.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $category_id The ID of the category to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Category
     */
    public function deleteCategory($location_id, $category_id)
    {
        list($response) = $this->deleteCategoryWithHttpInfo($location_id, $category_id);
        return $response;
    }

    /**
     * Operation deleteCategoryWithHttpInfo
     *
     * Deletes an existing item category.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $category_id The ID of the category to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Category, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCategoryWithHttpInfo($location_id, $category_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteCategory');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling deleteCategory');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Category',
                '/v1/{location_id}/categories/{category_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Category', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Category', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDiscount
     *
     * Deletes an existing discount.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $discount_id The ID of the discount to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Discount
     */
    public function deleteDiscount($location_id, $discount_id)
    {
        list($response) = $this->deleteDiscountWithHttpInfo($location_id, $discount_id);
        return $response;
    }

    /**
     * Operation deleteDiscountWithHttpInfo
     *
     * Deletes an existing discount.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $discount_id The ID of the discount to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Discount, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDiscountWithHttpInfo($location_id, $discount_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteDiscount');
        }
        // verify the required parameter 'discount_id' is set
        if ($discount_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $discount_id when calling deleteDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/discounts/{discount_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($discount_id !== null) {
            $resourcePath = str_replace(
                "{" . "discount_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($discount_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Discount',
                '/v1/{location_id}/discounts/{discount_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Discount', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Discount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFee
     *
     * Deletes an existing fee (tax).
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $fee_id The ID of the fee to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Fee
     */
    public function deleteFee($location_id, $fee_id)
    {
        list($response) = $this->deleteFeeWithHttpInfo($location_id, $fee_id);
        return $response;
    }

    /**
     * Operation deleteFeeWithHttpInfo
     *
     * Deletes an existing fee (tax).
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $fee_id The ID of the fee to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Fee, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFeeWithHttpInfo($location_id, $fee_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteFee');
        }
        // verify the required parameter 'fee_id' is set
        if ($fee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fee_id when calling deleteFee');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/fees/{fee_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($fee_id !== null) {
            $resourcePath = str_replace(
                "{" . "fee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fee_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Fee',
                '/v1/{location_id}/fees/{fee_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Fee', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Fee', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteItem
     *
     * Deletes an existing item and all item variations associated with it.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function deleteItem($location_id, $item_id)
    {
        list($response) = $this->deleteItemWithHttpInfo($location_id, $item_id);
        return $response;
    }

    /**
     * Operation deleteItemWithHttpInfo
     *
     * Deletes an existing item and all item variations associated with it.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteItemWithHttpInfo($location_id, $item_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteItem');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling deleteItem');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModifierList
     *
     * Deletes an existing item modifier list and all modifier options associated with it.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierList
     */
    public function deleteModifierList($location_id, $modifier_list_id)
    {
        list($response) = $this->deleteModifierListWithHttpInfo($location_id, $modifier_list_id);
        return $response;
    }

    /**
     * Operation deleteModifierListWithHttpInfo
     *
     * Deletes an existing item modifier list and all modifier options associated with it.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierList, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModifierListWithHttpInfo($location_id, $modifier_list_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteModifierList');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling deleteModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierList',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteModifierOption
     *
     * Deletes an existing item modifier option from a modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to delete. (required)
     * @param string $modifier_option_id The ID of the modifier list to edit. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierOption
     */
    public function deleteModifierOption($location_id, $modifier_list_id, $modifier_option_id)
    {
        list($response) = $this->deleteModifierOptionWithHttpInfo($location_id, $modifier_list_id, $modifier_option_id);
        return $response;
    }

    /**
     * Operation deleteModifierOptionWithHttpInfo
     *
     * Deletes an existing item modifier option from a modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to delete. (required)
     * @param string $modifier_option_id The ID of the modifier list to edit. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierOption, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteModifierOptionWithHttpInfo($location_id, $modifier_list_id, $modifier_option_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteModifierOption');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling deleteModifierOption');
        }
        // verify the required parameter 'modifier_option_id' is set
        if ($modifier_option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_option_id when calling deleteModifierOption');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_option_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_option_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierOption',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierOption', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePage
     *
     * Deletes an existing Favorites page and all of its cells.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page
     */
    public function deletePage($location_id, $page_id)
    {
        list($response) = $this->deletePageWithHttpInfo($location_id, $page_id);
        return $response;
    }

    /**
     * Operation deletePageWithHttpInfo
     *
     * Deletes an existing Favorites page and all of its cells.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePageWithHttpInfo($location_id, $page_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deletePage');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling deletePage');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages/{page_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page',
                '/v1/{location_id}/pages/{page_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deletePageCell
     *
     * Deletes a cell from a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page to delete. (required)
     * @param string $row The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)
     * @param string $column The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page
     */
    public function deletePageCell($location_id, $page_id, $row = null, $column = null)
    {
        list($response) = $this->deletePageCellWithHttpInfo($location_id, $page_id, $row, $column);
        return $response;
    }

    /**
     * Operation deletePageCellWithHttpInfo
     *
     * Deletes a cell from a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page to delete. (required)
     * @param string $row The row of the cell to clear. Always an integer between 0 and 4, inclusive. Row 0 is the top row. (optional)
     * @param string $column The column of the cell to clear. Always an integer between 0 and 4, inclusive. Column 0 is the leftmost column. (optional)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePageCellWithHttpInfo($location_id, $page_id, $row = null, $column = null)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deletePageCell');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling deletePageCell');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages/{page_id}/cells";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($row !== null) {
            $queryParams['row'] = $this->apiClient->getSerializer()->toQueryValue($row);
        }
        // query params
        if ($column !== null) {
            $queryParams['column'] = $this->apiClient->getSerializer()->toQueryValue($column);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page',
                '/v1/{location_id}/pages/{page_id}/cells'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteVariation
     *
     * Deletes an existing item variation from an item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to delete. (required)
     * @param string $variation_id The ID of the variation to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Variation
     */
    public function deleteVariation($location_id, $item_id, $variation_id)
    {
        list($response) = $this->deleteVariationWithHttpInfo($location_id, $item_id, $variation_id);
        return $response;
    }

    /**
     * Operation deleteVariationWithHttpInfo
     *
     * Deletes an existing item variation from an item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to delete. (required)
     * @param string $variation_id The ID of the variation to delete. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Variation, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVariationWithHttpInfo($location_id, $item_id, $variation_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling deleteVariation');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling deleteVariation');
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variation_id when calling deleteVariation');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                "{" . "variation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variation_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Variation',
                '/v1/{location_id}/items/{item_id}/variations/{variation_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Variation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Variation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listCategories
     *
     * Lists all of a location's item categories.
     *
     * @param string $location_id The ID of the location to list categories for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Category[]
     */
    public function listCategories($location_id)
    {
        list($response) = $this->listCategoriesWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listCategoriesWithHttpInfo
     *
     * Lists all of a location's item categories.
     *
     * @param string $location_id The ID of the location to list categories for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Category[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listCategoriesWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listCategories');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Category[]',
                '/v1/{location_id}/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Category[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Category[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listDiscounts
     *
     * Lists all of a location's discounts.
     *
     * @param string $location_id The ID of the location to list categories for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Discount[]
     */
    public function listDiscounts($location_id)
    {
        list($response) = $this->listDiscountsWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listDiscountsWithHttpInfo
     *
     * Lists all of a location's discounts.
     *
     * @param string $location_id The ID of the location to list categories for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Discount[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listDiscountsWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listDiscounts');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/discounts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Discount[]',
                '/v1/{location_id}/discounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Discount[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Discount[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFees
     *
     * Lists all of a location's fees (taxes).
     *
     * @param string $location_id The ID of the location to list fees for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Fee[]
     */
    public function listFees($location_id)
    {
        list($response) = $this->listFeesWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listFeesWithHttpInfo
     *
     * Lists all of a location's fees (taxes).
     *
     * @param string $location_id The ID of the location to list fees for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Fee[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listFeesWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listFees');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/fees";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Fee[]',
                '/v1/{location_id}/fees'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Fee[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Fee[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listInventory
     *
     * Provides inventory information for all of a merchant's inventory-enabled item variations.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param int $limit The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1InventoryEntry[]
     */
    public function listInventory($location_id, $limit = null)
    {
        list($response) = $this->listInventoryWithHttpInfo($location_id, $limit);
        return $response;
    }

    /**
     * Operation listInventoryWithHttpInfo
     *
     * Provides inventory information for all of a merchant's inventory-enabled item variations.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param int $limit The maximum number of inventory entries to return in a single response. This value cannot exceed 1000. (optional)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1InventoryEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listInventoryWithHttpInfo($location_id, $limit = null)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listInventory');
        }
        if (!is_null($limit) && ($limit > 1000)) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling V1ItemsApi.listInventory, must be smaller than or equal to 1000.');
        }

        // parse inputs
        $resourcePath = "/v1/{location_id}/inventory";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1InventoryEntry[]',
                '/v1/{location_id}/inventory'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1InventoryEntry[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1InventoryEntry[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listItems
     *
     * Provides summary information for all of a location's items.
     *
     * @param string $location_id The ID of the location to list items for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item[]
     */
    public function listItems($location_id)
    {
        list($response) = $this->listItemsWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listItemsWithHttpInfo
     *
     * Provides summary information for all of a location's items.
     *
     * @param string $location_id The ID of the location to list items for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemsWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listItems');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item[]',
                '/v1/{location_id}/items'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listModifierLists
     *
     * Lists all of a location's modifier lists.
     *
     * @param string $location_id The ID of the location to list modifier lists for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierList[]
     */
    public function listModifierLists($location_id)
    {
        list($response) = $this->listModifierListsWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listModifierListsWithHttpInfo
     *
     * Lists all of a location's modifier lists.
     *
     * @param string $location_id The ID of the location to list modifier lists for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierList[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listModifierListsWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listModifierLists');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierList[]',
                '/v1/{location_id}/modifier-lists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierList[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierList[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPages
     *
     * Lists all of a location's Favorites pages in Square Register.
     *
     * @param string $location_id The ID of the location to list Favorites pages for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page[]
     */
    public function listPages($location_id)
    {
        list($response) = $this->listPagesWithHttpInfo($location_id);
        return $response;
    }

    /**
     * Operation listPagesWithHttpInfo
     *
     * Lists all of a location's Favorites pages in Square Register.
     *
     * @param string $location_id The ID of the location to list Favorites pages for. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listPagesWithHttpInfo($location_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling listPages');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page[]',
                '/v1/{location_id}/pages'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeFee
     *
     * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $item_id The ID of the item to add the fee to. (required)
     * @param string $fee_id The ID of the fee to apply. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function removeFee($location_id, $item_id, $fee_id)
    {
        list($response) = $this->removeFeeWithHttpInfo($location_id, $item_id, $fee_id);
        return $response;
    }

    /**
     * Operation removeFeeWithHttpInfo
     *
     * Removes a fee assocation from an item, meaning the fee is no longer automatically applied to the item in Square Register.
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $item_id The ID of the item to add the fee to. (required)
     * @param string $fee_id The ID of the fee to apply. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeFeeWithHttpInfo($location_id, $item_id, $fee_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling removeFee');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling removeFee');
        }
        // verify the required parameter 'fee_id' is set
        if ($fee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fee_id when calling removeFee');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/fees/{fee_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($fee_id !== null) {
            $resourcePath = str_replace(
                "{" . "fee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fee_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}/fees/{fee_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeModifierList
     *
     * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to remove. (required)
     * @param string $item_id The ID of the item to remove the modifier list from. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function removeModifierList($location_id, $modifier_list_id, $item_id)
    {
        list($response) = $this->removeModifierListWithHttpInfo($location_id, $modifier_list_id, $item_id);
        return $response;
    }

    /**
     * Operation removeModifierListWithHttpInfo
     *
     * Removes a modifier list association from an item, meaning modifier options from the list can no longer be applied to the item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to remove. (required)
     * @param string $item_id The ID of the item to remove the modifier list from. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeModifierListWithHttpInfo($location_id, $modifier_list_id, $item_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling removeModifierList');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling removeModifierList');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling removeModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}/modifier-lists/{modifier_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveItem
     *
     * Provides the details for a single item, including associated modifier lists and fees.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The item&#39;s ID. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function retrieveItem($location_id, $item_id)
    {
        list($response) = $this->retrieveItemWithHttpInfo($location_id, $item_id);
        return $response;
    }

    /**
     * Operation retrieveItemWithHttpInfo
     *
     * Provides the details for a single item, including associated modifier lists and fees.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The item&#39;s ID. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveItemWithHttpInfo($location_id, $item_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling retrieveItem');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling retrieveItem');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveModifierList
     *
     * Provides the details for a single modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The modifier list&#39;s ID. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierList
     */
    public function retrieveModifierList($location_id, $modifier_list_id)
    {
        list($response) = $this->retrieveModifierListWithHttpInfo($location_id, $modifier_list_id);
        return $response;
    }

    /**
     * Operation retrieveModifierListWithHttpInfo
     *
     * Provides the details for a single modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The modifier list&#39;s ID. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierList, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveModifierListWithHttpInfo($location_id, $modifier_list_id)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling retrieveModifierList');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling retrieveModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierList',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCategory
     *
     * Modifies the details of an existing item category.
     *
     * @param string $location_id The ID of the category&#39;s associated location. (required)
     * @param string $category_id The ID of the category to edit. (required)
     * @param \SquareConnect\Model\V1Category $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Category
     */
    public function updateCategory($location_id, $category_id, $body)
    {
        list($response) = $this->updateCategoryWithHttpInfo($location_id, $category_id, $body);
        return $response;
    }

    /**
     * Operation updateCategoryWithHttpInfo
     *
     * Modifies the details of an existing item category.
     *
     * @param string $location_id The ID of the category&#39;s associated location. (required)
     * @param string $category_id The ID of the category to edit. (required)
     * @param \SquareConnect\Model\V1Category $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Category, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCategoryWithHttpInfo($location_id, $category_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateCategory');
        }
        // verify the required parameter 'category_id' is set
        if ($category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category_id when calling updateCategory');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateCategory');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/categories/{category_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($category_id !== null) {
            $resourcePath = str_replace(
                "{" . "category_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($category_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Category',
                '/v1/{location_id}/categories/{category_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Category', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Category', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateDiscount
     *
     * Modifies the details of an existing discount.
     *
     * @param string $location_id The ID of the category&#39;s associated location. (required)
     * @param string $discount_id The ID of the discount to edit. (required)
     * @param \SquareConnect\Model\V1Discount $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Discount
     */
    public function updateDiscount($location_id, $discount_id, $body)
    {
        list($response) = $this->updateDiscountWithHttpInfo($location_id, $discount_id, $body);
        return $response;
    }

    /**
     * Operation updateDiscountWithHttpInfo
     *
     * Modifies the details of an existing discount.
     *
     * @param string $location_id The ID of the category&#39;s associated location. (required)
     * @param string $discount_id The ID of the discount to edit. (required)
     * @param \SquareConnect\Model\V1Discount $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Discount, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDiscountWithHttpInfo($location_id, $discount_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateDiscount');
        }
        // verify the required parameter 'discount_id' is set
        if ($discount_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $discount_id when calling updateDiscount');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateDiscount');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/discounts/{discount_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($discount_id !== null) {
            $resourcePath = str_replace(
                "{" . "discount_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($discount_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Discount',
                '/v1/{location_id}/discounts/{discount_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Discount', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Discount', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateFee
     *
     * Modifies the details of an existing fee (tax).
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $fee_id The ID of the fee to edit. (required)
     * @param \SquareConnect\Model\V1Fee $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Fee
     */
    public function updateFee($location_id, $fee_id, $body)
    {
        list($response) = $this->updateFeeWithHttpInfo($location_id, $fee_id, $body);
        return $response;
    }

    /**
     * Operation updateFeeWithHttpInfo
     *
     * Modifies the details of an existing fee (tax).
     *
     * @param string $location_id The ID of the fee&#39;s associated location. (required)
     * @param string $fee_id The ID of the fee to edit. (required)
     * @param \SquareConnect\Model\V1Fee $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Fee, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFeeWithHttpInfo($location_id, $fee_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateFee');
        }
        // verify the required parameter 'fee_id' is set
        if ($fee_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fee_id when calling updateFee');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateFee');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/fees/{fee_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($fee_id !== null) {
            $resourcePath = str_replace(
                "{" . "fee_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($fee_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Fee',
                '/v1/{location_id}/fees/{fee_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Fee', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Fee', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateItem
     *
     * Modifies the core details of an existing item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @param \SquareConnect\Model\V1Item $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Item
     */
    public function updateItem($location_id, $item_id, $body)
    {
        list($response) = $this->updateItemWithHttpInfo($location_id, $item_id, $body);
        return $response;
    }

    /**
     * Operation updateItemWithHttpInfo
     *
     * Modifies the core details of an existing item.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @param \SquareConnect\Model\V1Item $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Item, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemWithHttpInfo($location_id, $item_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateItem');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling updateItem');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateItem');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Item',
                '/v1/{location_id}/items/{item_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Item', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Item', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateModifierList
     *
     * Modifies the details of an existing item modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1UpdateModifierListRequest $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierList
     */
    public function updateModifierList($location_id, $modifier_list_id, $body)
    {
        list($response) = $this->updateModifierListWithHttpInfo($location_id, $modifier_list_id, $body);
        return $response;
    }

    /**
     * Operation updateModifierListWithHttpInfo
     *
     * Modifies the details of an existing item modifier list.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1UpdateModifierListRequest $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierList, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModifierListWithHttpInfo($location_id, $modifier_list_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateModifierList');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling updateModifierList');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateModifierList');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierList',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateModifierOption
     *
     * Modifies the details of an existing item modifier option.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param string $modifier_option_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1ModifierOption $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1ModifierOption
     */
    public function updateModifierOption($location_id, $modifier_list_id, $modifier_option_id, $body)
    {
        list($response) = $this->updateModifierOptionWithHttpInfo($location_id, $modifier_list_id, $modifier_option_id, $body);
        return $response;
    }

    /**
     * Operation updateModifierOptionWithHttpInfo
     *
     * Modifies the details of an existing item modifier option.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $modifier_list_id The ID of the modifier list to edit. (required)
     * @param string $modifier_option_id The ID of the modifier list to edit. (required)
     * @param \SquareConnect\Model\V1ModifierOption $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1ModifierOption, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateModifierOptionWithHttpInfo($location_id, $modifier_list_id, $modifier_option_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateModifierOption');
        }
        // verify the required parameter 'modifier_list_id' is set
        if ($modifier_list_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_list_id when calling updateModifierOption');
        }
        // verify the required parameter 'modifier_option_id' is set
        if ($modifier_option_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $modifier_option_id when calling updateModifierOption');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateModifierOption');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_list_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_list_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_list_id),
                $resourcePath
            );
        }
        // path params
        if ($modifier_option_id !== null) {
            $resourcePath = str_replace(
                "{" . "modifier_option_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($modifier_option_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1ModifierOption',
                '/v1/{location_id}/modifier-lists/{modifier_list_id}/modifier-options/{modifier_option_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1ModifierOption', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1ModifierOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePage
     *
     * Modifies the details of a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location (required)
     * @param string $page_id The ID of the page to modify. (required)
     * @param \SquareConnect\Model\V1Page $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page
     */
    public function updatePage($location_id, $page_id, $body)
    {
        list($response) = $this->updatePageWithHttpInfo($location_id, $page_id, $body);
        return $response;
    }

    /**
     * Operation updatePageWithHttpInfo
     *
     * Modifies the details of a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location (required)
     * @param string $page_id The ID of the page to modify. (required)
     * @param \SquareConnect\Model\V1Page $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePageWithHttpInfo($location_id, $page_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updatePage');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling updatePage');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePage');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages/{page_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page',
                '/v1/{location_id}/pages/{page_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePageCell
     *
     * Modifies a cell of a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page the cell belongs to. (required)
     * @param \SquareConnect\Model\V1PageCell $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Page
     */
    public function updatePageCell($location_id, $page_id, $body)
    {
        list($response) = $this->updatePageCellWithHttpInfo($location_id, $page_id, $body);
        return $response;
    }

    /**
     * Operation updatePageCellWithHttpInfo
     *
     * Modifies a cell of a Favorites page in Square Register.
     *
     * @param string $location_id The ID of the Favorites page&#39;s associated location. (required)
     * @param string $page_id The ID of the page the cell belongs to. (required)
     * @param \SquareConnect\Model\V1PageCell $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Page, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePageCellWithHttpInfo($location_id, $page_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updatePageCell');
        }
        // verify the required parameter 'page_id' is set
        if ($page_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $page_id when calling updatePageCell');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updatePageCell');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/pages/{page_id}/cells";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($page_id !== null) {
            $resourcePath = str_replace(
                "{" . "page_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($page_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Page',
                '/v1/{location_id}/pages/{page_id}/cells'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Page', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Page', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateVariation
     *
     * Modifies the details of an existing item variation.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @param string $variation_id The ID of the variation to modify. (required)
     * @param \SquareConnect\Model\V1Variation $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return \SquareConnect\Model\V1Variation
     */
    public function updateVariation($location_id, $item_id, $variation_id, $body)
    {
        list($response) = $this->updateVariationWithHttpInfo($location_id, $item_id, $variation_id, $body);
        return $response;
    }

    /**
     * Operation updateVariationWithHttpInfo
     *
     * Modifies the details of an existing item variation.
     *
     * @param string $location_id The ID of the item&#39;s associated location. (required)
     * @param string $item_id The ID of the item to modify. (required)
     * @param string $variation_id The ID of the variation to modify. (required)
     * @param \SquareConnect\Model\V1Variation $body An object containing the fields to POST for the request.  See the corresponding object definition for field details. (required)
     * @throws \SquareConnect\ApiException on non-2xx response
     * @return array of \SquareConnect\Model\V1Variation, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVariationWithHttpInfo($location_id, $item_id, $variation_id, $body)
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling updateVariation');
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $item_id when calling updateVariation');
        }
        // verify the required parameter 'variation_id' is set
        if ($variation_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variation_id when calling updateVariation');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateVariation');
        }
        // parse inputs
        $resourcePath = "/v1/{location_id}/items/{item_id}/variations/{variation_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                "{" . "item_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($variation_id !== null) {
            $resourcePath = str_replace(
                "{" . "variation_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($variation_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SquareConnect\Model\V1Variation',
                '/v1/{location_id}/items/{item_id}/variations/{variation_id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SquareConnect\Model\V1Variation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SquareConnect\Model\V1Variation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
