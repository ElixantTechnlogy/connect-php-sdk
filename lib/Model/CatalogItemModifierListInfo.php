<?php
/**
 * CatalogItemModifierListInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogItemModifierListInfo Class Doc Comment
 *
 * @category    Class
 * @description Controls the properties of a [CatalogModifierList](#type-catalogmodifierlist) as it applies to this [CatalogItem](#type-catalogitem).
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogItemModifierListInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogItemModifierListInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'modifier_list_id' => 'string',
        'modifier_overrides' => '\SquareConnect\Model\CatalogModifierOverride[]',
        'min_selected_modifiers' => 'int',
        'max_selected_modifiers' => 'int',
        'enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'modifier_list_id' => null,
        'modifier_overrides' => null,
        'min_selected_modifiers' => null,
        'max_selected_modifiers' => null,
        'enabled' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'modifier_list_id' => 'modifier_list_id',
        'modifier_overrides' => 'modifier_overrides',
        'min_selected_modifiers' => 'min_selected_modifiers',
        'max_selected_modifiers' => 'max_selected_modifiers',
        'enabled' => 'enabled'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'modifier_list_id' => 'setModifierListId',
        'modifier_overrides' => 'setModifierOverrides',
        'min_selected_modifiers' => 'setMinSelectedModifiers',
        'max_selected_modifiers' => 'setMaxSelectedModifiers',
        'enabled' => 'setEnabled'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'modifier_list_id' => 'getModifierListId',
        'modifier_overrides' => 'getModifierOverrides',
        'min_selected_modifiers' => 'getMinSelectedModifiers',
        'max_selected_modifiers' => 'getMaxSelectedModifiers',
        'enabled' => 'getEnabled'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['modifier_list_id'] = isset($data['modifier_list_id']) ? $data['modifier_list_id'] : null;
        $this->container['modifier_overrides'] = isset($data['modifier_overrides']) ? $data['modifier_overrides'] : null;
        $this->container['min_selected_modifiers'] = isset($data['min_selected_modifiers']) ? $data['min_selected_modifiers'] : null;
        $this->container['max_selected_modifiers'] = isset($data['max_selected_modifiers']) ? $data['max_selected_modifiers'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['modifier_list_id'] === null) {
            $invalid_properties[] = "'modifier_list_id' can't be null";
        }
        if ((strlen($this->container['modifier_list_id']) < 1)) {
            $invalid_properties[] = "invalid value for 'modifier_list_id', the character length must be bigger than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['modifier_list_id'] === null) {
            return false;
        }
        if (strlen($this->container['modifier_list_id']) < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets modifier_list_id
     * @return string
     */
    public function getModifierListId()
    {
        return $this->container['modifier_list_id'];
    }

    /**
     * Sets modifier_list_id
     * @param string $modifier_list_id The ID of the [CatalogModifierList](#type-catalogmodifierlist) controlled by this [CatalogModifierListInfo](#type-catalogmodifierlistinfo).
     * @return $this
     */
    public function setModifierListId($modifier_list_id)
    {

        if ((strlen($modifier_list_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $modifier_list_id when calling CatalogItemModifierListInfo., must be bigger than or equal to 1.');
        }

        $this->container['modifier_list_id'] = $modifier_list_id;

        return $this;
    }

    /**
     * Gets modifier_overrides
     * @return \SquareConnect\Model\CatalogModifierOverride[]
     */
    public function getModifierOverrides()
    {
        return $this->container['modifier_overrides'];
    }

    /**
     * Sets modifier_overrides
     * @param \SquareConnect\Model\CatalogModifierOverride[] $modifier_overrides A set of [CatalogModifierOverride](#type-catalogmodifieroverride) objects that override whether a given [CatalogModifier](#type-catalogmodifier) is enabled by default.
     * @return $this
     */
    public function setModifierOverrides($modifier_overrides)
    {
        $this->container['modifier_overrides'] = $modifier_overrides;

        return $this;
    }

    /**
     * Gets min_selected_modifiers
     * @return int
     */
    public function getMinSelectedModifiers()
    {
        return $this->container['min_selected_modifiers'];
    }

    /**
     * Sets min_selected_modifiers
     * @param int $min_selected_modifiers If zero or larger, the smallest number of [CatalogModifier](#type-catalogmodifier)s that must be selected from this [CatalogModifierList](#type-catalogmodifierlist).
     * @return $this
     */
    public function setMinSelectedModifiers($min_selected_modifiers)
    {
        $this->container['min_selected_modifiers'] = $min_selected_modifiers;

        return $this;
    }

    /**
     * Gets max_selected_modifiers
     * @return int
     */
    public function getMaxSelectedModifiers()
    {
        return $this->container['max_selected_modifiers'];
    }

    /**
     * Sets max_selected_modifiers
     * @param int $max_selected_modifiers If zero or larger, the largest number of [CatalogModifier](#type-catalogmodifier)s that can be selected from this [CatalogModifierList](#type-catalogmodifierlist).
     * @return $this
     */
    public function setMaxSelectedModifiers($max_selected_modifiers)
    {
        $this->container['max_selected_modifiers'] = $max_selected_modifiers;

        return $this;
    }

    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param bool $enabled If `true`, enable this [CatalogModifierList](#type-catalogmodifierlist).
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


