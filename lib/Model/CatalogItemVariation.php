<?php
/**
 * CatalogItemVariation
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogItemVariation Class Doc Comment
 *
 * @category    Class
 * @description An item variation (i.e., product) in the Catalog object model.
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogItemVariation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogItemVariation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_id' => 'string',
        'name' => 'string',
        'sku' => 'string',
        'upc' => 'string',
        'pricing_type' => 'string',
        'price_money' => '\SquareConnect\Model\Money',
        'location_overrides' => '\SquareConnect\Model\ItemVariationLocationOverrides[]',
        'track_inventory' => 'bool',
        'inventory_alert_type' => 'string',
        'inventory_alert_threshold' => 'int',
        'user_data' => 'string',
        'service_duration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_id' => null,
        'name' => null,
        'sku' => null,
        'upc' => null,
        'pricing_type' => null,
        'price_money' => null,
        'location_overrides' => null,
        'track_inventory' => null,
        'inventory_alert_type' => null,
        'inventory_alert_threshold' => 'int64',
        'user_data' => null,
        'service_duration' => 'int64'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'item_id',
        'name' => 'name',
        'sku' => 'sku',
        'upc' => 'upc',
        'pricing_type' => 'pricing_type',
        'price_money' => 'price_money',
        'location_overrides' => 'location_overrides',
        'track_inventory' => 'track_inventory',
        'inventory_alert_type' => 'inventory_alert_type',
        'inventory_alert_threshold' => 'inventory_alert_threshold',
        'user_data' => 'user_data',
        'service_duration' => 'service_duration'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'name' => 'setName',
        'sku' => 'setSku',
        'upc' => 'setUpc',
        'pricing_type' => 'setPricingType',
        'price_money' => 'setPriceMoney',
        'location_overrides' => 'setLocationOverrides',
        'track_inventory' => 'setTrackInventory',
        'inventory_alert_type' => 'setInventoryAlertType',
        'inventory_alert_threshold' => 'setInventoryAlertThreshold',
        'user_data' => 'setUserData',
        'service_duration' => 'setServiceDuration'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'name' => 'getName',
        'sku' => 'getSku',
        'upc' => 'getUpc',
        'pricing_type' => 'getPricingType',
        'price_money' => 'getPriceMoney',
        'location_overrides' => 'getLocationOverrides',
        'track_inventory' => 'getTrackInventory',
        'inventory_alert_type' => 'getInventoryAlertType',
        'inventory_alert_threshold' => 'getInventoryAlertThreshold',
        'user_data' => 'getUserData',
        'service_duration' => 'getServiceDuration'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRICING_TYPE_FIXED_PRICING = 'FIXED_PRICING';
    const PRICING_TYPE_VARIABLE_PRICING = 'VARIABLE_PRICING';
    const INVENTORY_ALERT_TYPE_NONE = 'NONE';
    const INVENTORY_ALERT_TYPE_LOW_QUANTITY = 'LOW_QUANTITY';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPricingTypeAllowableValues()
    {
        return [
            self::PRICING_TYPE_FIXED_PRICING,
            self::PRICING_TYPE_VARIABLE_PRICING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInventoryAlertTypeAllowableValues()
    {
        return [
            self::INVENTORY_ALERT_TYPE_NONE,
            self::INVENTORY_ALERT_TYPE_LOW_QUANTITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['pricing_type'] = isset($data['pricing_type']) ? $data['pricing_type'] : null;
        $this->container['price_money'] = isset($data['price_money']) ? $data['price_money'] : null;
        $this->container['location_overrides'] = isset($data['location_overrides']) ? $data['location_overrides'] : null;
        $this->container['track_inventory'] = isset($data['track_inventory']) ? $data['track_inventory'] : null;
        $this->container['inventory_alert_type'] = isset($data['inventory_alert_type']) ? $data['inventory_alert_type'] : null;
        $this->container['inventory_alert_threshold'] = isset($data['inventory_alert_threshold']) ? $data['inventory_alert_threshold'] : null;
        $this->container['user_data'] = isset($data['user_data']) ? $data['user_data'] : null;
        $this->container['service_duration'] = isset($data['service_duration']) ? $data['service_duration'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getPricingTypeAllowableValues();
        if (!in_array($this->container['pricing_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'pricing_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getInventoryAlertTypeAllowableValues();
        if (!in_array($this->container['inventory_alert_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'inventory_alert_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getPricingTypeAllowableValues();
        if (!in_array($this->container['pricing_type'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getInventoryAlertTypeAllowableValues();
        if (!in_array($this->container['inventory_alert_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets item_id
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     * @param string $item_id The ID of the [CatalogItem](#type-catalogitem) associated with this item variation. Searchable.
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The item variation's name. Searchable.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku The item variation's SKU, if any. Searchable.
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets upc
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     * @param string $upc The item variation's UPC, if any. Searchable.
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets pricing_type
     * @return string
     */
    public function getPricingType()
    {
        return $this->container['pricing_type'];
    }

    /**
     * Sets pricing_type
     * @param string $pricing_type Indicates whether the item variation's price is fixed or determined at the time of sale. See [CatalogPricingType](#type-catalogpricingtype) for all possible values.
     * @return $this
     */
    public function setPricingType($pricing_type)
    {
        $allowed_values = $this->getPricingTypeAllowableValues();
        if (!is_null($pricing_type) && !in_array($pricing_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pricing_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['pricing_type'] = $pricing_type;

        return $this;
    }

    /**
     * Gets price_money
     * @return \SquareConnect\Model\Money
     */
    public function getPriceMoney()
    {
        return $this->container['price_money'];
    }

    /**
     * Sets price_money
     * @param \SquareConnect\Model\Money $price_money The item variation's price, if fixed pricing is used.
     * @return $this
     */
    public function setPriceMoney($price_money)
    {
        $this->container['price_money'] = $price_money;

        return $this;
    }

    /**
     * Gets location_overrides
     * @return \SquareConnect\Model\ItemVariationLocationOverrides[]
     */
    public function getLocationOverrides()
    {
        return $this->container['location_overrides'];
    }

    /**
     * Sets location_overrides
     * @param \SquareConnect\Model\ItemVariationLocationOverrides[] $location_overrides Per-location price and inventory overrides.
     * @return $this
     */
    public function setLocationOverrides($location_overrides)
    {
        $this->container['location_overrides'] = $location_overrides;

        return $this;
    }

    /**
     * Gets track_inventory
     * @return bool
     */
    public function getTrackInventory()
    {
        return $this->container['track_inventory'];
    }

    /**
     * Sets track_inventory
     * @param bool $track_inventory If `true`, inventory tracking is active for the variation.
     * @return $this
     */
    public function setTrackInventory($track_inventory)
    {
        $this->container['track_inventory'] = $track_inventory;

        return $this;
    }

    /**
     * Gets inventory_alert_type
     * @return string
     */
    public function getInventoryAlertType()
    {
        return $this->container['inventory_alert_type'];
    }

    /**
     * Sets inventory_alert_type
     * @param string $inventory_alert_type Indicates whether the item variation displays an alert when its inventory quantity is less than or equal to its `inventory_alert_threshold`. See [InventoryAlertType](#type-inventoryalerttype) for all possible values.
     * @return $this
     */
    public function setInventoryAlertType($inventory_alert_type)
    {
        $allowed_values = $this->getInventoryAlertTypeAllowableValues();
        if (!is_null($inventory_alert_type) && !in_array($inventory_alert_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inventory_alert_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['inventory_alert_type'] = $inventory_alert_type;

        return $this;
    }

    /**
     * Gets inventory_alert_threshold
     * @return int
     */
    public function getInventoryAlertThreshold()
    {
        return $this->container['inventory_alert_threshold'];
    }

    /**
     * Sets inventory_alert_threshold
     * @param int $inventory_alert_threshold If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type` is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.  This value is always an integer.
     * @return $this
     */
    public function setInventoryAlertThreshold($inventory_alert_threshold)
    {
        $this->container['inventory_alert_threshold'] = $inventory_alert_threshold;

        return $this;
    }

    /**
     * Gets user_data
     * @return string
     */
    public function getUserData()
    {
        return $this->container['user_data'];
    }

    /**
     * Sets user_data
     * @param string $user_data Arbitrary user metadata to associate with the item variation. Cannot exceed 255 characters. Searchable.
     * @return $this
     */
    public function setUserData($user_data)
    {
        $this->container['user_data'] = $user_data;

        return $this;
    }

    /**
     * Gets service_duration
     * @return int
     */
    public function getServiceDuration()
    {
        return $this->container['service_duration'];
    }

    /**
     * Sets service_duration
     * @param int $service_duration If the [CatalogItem](#type-catalogitem) that owns this item variation is of type `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For example, a 30 minute appointment would have the value `1800000`, which is equal to 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
     * @return $this
     */
    public function setServiceDuration($service_duration)
    {
        $this->container['service_duration'] = $service_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


