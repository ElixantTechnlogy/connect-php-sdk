<?php
/**
 * CatalogDiscount
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogDiscount Class Doc Comment
 *
 * @category    Class
 * @description A discount in the Catalog object model.
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogDiscount implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogDiscount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'discount_type' => 'string',
        'percentage' => 'string',
        'amount_money' => '\SquareConnect\Model\Money',
        'pin_required' => 'bool',
        'label_color' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'discount_type' => null,
        'percentage' => null,
        'amount_money' => null,
        'pin_required' => null,
        'label_color' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'discount_type' => 'discount_type',
        'percentage' => 'percentage',
        'amount_money' => 'amount_money',
        'pin_required' => 'pin_required',
        'label_color' => 'label_color'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'discount_type' => 'setDiscountType',
        'percentage' => 'setPercentage',
        'amount_money' => 'setAmountMoney',
        'pin_required' => 'setPinRequired',
        'label_color' => 'setLabelColor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'discount_type' => 'getDiscountType',
        'percentage' => 'getPercentage',
        'amount_money' => 'getAmountMoney',
        'pin_required' => 'getPinRequired',
        'label_color' => 'getLabelColor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DISCOUNT_TYPE_FIXED_PERCENTAGE = 'FIXED_PERCENTAGE';
    const DISCOUNT_TYPE_FIXED_AMOUNT = 'FIXED_AMOUNT';
    const DISCOUNT_TYPE_VARIABLE_PERCENTAGE = 'VARIABLE_PERCENTAGE';
    const DISCOUNT_TYPE_VARIABLE_AMOUNT = 'VARIABLE_AMOUNT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDiscountTypeAllowableValues()
    {
        return [
            self::DISCOUNT_TYPE_FIXED_PERCENTAGE,
            self::DISCOUNT_TYPE_FIXED_AMOUNT,
            self::DISCOUNT_TYPE_VARIABLE_PERCENTAGE,
            self::DISCOUNT_TYPE_VARIABLE_AMOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['amount_money'] = isset($data['amount_money']) ? $data['amount_money'] : null;
        $this->container['pin_required'] = isset($data['pin_required']) ? $data['pin_required'] : null;
        $this->container['label_color'] = isset($data['label_color']) ? $data['label_color'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        $allowed_values = $this->getDiscountTypeAllowableValues();
        if (!in_array($this->container['discount_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'discount_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        $allowed_values = $this->getDiscountTypeAllowableValues();
        if (!in_array($this->container['discount_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The discount's name. Searchable.
     * @return $this
     */
    public function setName($name)
    {

        if ((strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CatalogDiscount., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets discount_type
     * @return string
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     * @param string $discount_type Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale. See [CatalogDiscountType](#type-catalogdiscounttype) for all possible values.
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $allowed_values = $this->getDiscountTypeAllowableValues();
        if (!is_null($discount_type) && !in_array($discount_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'discount_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets percentage
     * @return string
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     * @param string $percentage The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type` is `VARIABLE_PERCENTAGE`.  Do not include this field for amount-based or variable discounts.
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets amount_money
     * @return \SquareConnect\Model\Money
     */
    public function getAmountMoney()
    {
        return $this->container['amount_money'];
    }

    /**
     * Sets amount_money
     * @param \SquareConnect\Model\Money $amount_money The amount of the discount. Specify an amount of `0` if `discount_type` is `VARIABLE_AMOUNT`.  Do not include this field for percentage-based or variable discounts.
     * @return $this
     */
    public function setAmountMoney($amount_money)
    {
        $this->container['amount_money'] = $amount_money;

        return $this;
    }

    /**
     * Gets pin_required
     * @return bool
     */
    public function getPinRequired()
    {
        return $this->container['pin_required'];
    }

    /**
     * Sets pin_required
     * @param bool $pin_required Indicates whether a mobile staff member needs to enter their PIN to apply the discount to a payment in the Square Point of Sale app.
     * @return $this
     */
    public function setPinRequired($pin_required)
    {
        $this->container['pin_required'] = $pin_required;

        return $this;
    }

    /**
     * Gets label_color
     * @return string
     */
    public function getLabelColor()
    {
        return $this->container['label_color'];
    }

    /**
     * Sets label_color
     * @param string $label_color The color of the discount's display label in the Square Point of Sale app.
     * @return $this
     */
    public function setLabelColor($label_color)
    {
        $this->container['label_color'] = $label_color;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


