<?php
/**
 * CatalogQuerySortedAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogQuerySortedAttribute Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogQuerySortedAttribute implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogQuerySortedAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute_name' => 'string',
        'initial_attribute_value' => 'string',
        'sort_order' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute_name' => null,
        'initial_attribute_value' => null,
        'sort_order' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute_name' => 'attribute_name',
        'initial_attribute_value' => 'initial_attribute_value',
        'sort_order' => 'sort_order'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'attribute_name' => 'setAttributeName',
        'initial_attribute_value' => 'setInitialAttributeValue',
        'sort_order' => 'setSortOrder'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'attribute_name' => 'getAttributeName',
        'initial_attribute_value' => 'getInitialAttributeValue',
        'sort_order' => 'getSortOrder'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SORT_ORDER_DESC = 'DESC';
    const SORT_ORDER_ASC = 'ASC';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSortOrderAllowableValues()
    {
        return [
            self::SORT_ORDER_DESC,
            self::SORT_ORDER_ASC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute_name'] = isset($data['attribute_name']) ? $data['attribute_name'] : null;
        $this->container['initial_attribute_value'] = isset($data['initial_attribute_value']) ? $data['initial_attribute_value'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['attribute_name'] === null) {
            $invalid_properties[] = "'attribute_name' can't be null";
        }
        if ((strlen($this->container['attribute_name']) < 1)) {
            $invalid_properties[] = "invalid value for 'attribute_name', the character length must be bigger than or equal to 1.";
        }

        $allowed_values = $this->getSortOrderAllowableValues();
        if (!in_array($this->container['sort_order'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sort_order', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['attribute_name'] === null) {
            return false;
        }
        if (strlen($this->container['attribute_name']) < 1) {
            return false;
        }
        $allowed_values = $this->getSortOrderAllowableValues();
        if (!in_array($this->container['sort_order'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets attribute_name
     * @return string
     */
    public function getAttributeName()
    {
        return $this->container['attribute_name'];
    }

    /**
     * Sets attribute_name
     * @param string $attribute_name The attribute whose value should be used as the sort key.
     * @return $this
     */
    public function setAttributeName($attribute_name)
    {

        if ((strlen($attribute_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $attribute_name when calling CatalogQuerySortedAttribute., must be bigger than or equal to 1.');
        }

        $this->container['attribute_name'] = $attribute_name;

        return $this;
    }

    /**
     * Gets initial_attribute_value
     * @return string
     */
    public function getInitialAttributeValue()
    {
        return $this->container['initial_attribute_value'];
    }

    /**
     * Sets initial_attribute_value
     * @param string $initial_attribute_value The first attribute value to be returned by the query. Ascending sorts will return only objects with this value or greater, while descending sorts will return only objects with this value or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
     * @return $this
     */
    public function setInitialAttributeValue($initial_attribute_value)
    {
        $this->container['initial_attribute_value'] = $initial_attribute_value;

        return $this;
    }

    /**
     * Gets sort_order
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     * @param string $sort_order The desired [SortOrder](#type-sortorder), `\"ASC\"` (ascending) or `\"DESC\"` (descending).
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $allowed_values = $this->getSortOrderAllowableValues();
        if (!is_null($sort_order) && !in_array($sort_order, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort_order', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


