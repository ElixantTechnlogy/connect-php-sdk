<?php
/**
 * CatalogItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogItem Class Doc Comment
 *
 * @category    Class
 * @description An item (i.e., product family) in the Catalog object model.
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'description' => 'string',
        'abbreviation' => 'string',
        'label_color' => 'string',
        'available_online' => 'bool',
        'available_for_pickup' => 'bool',
        'available_electronically' => 'bool',
        'category_id' => 'string',
        'tax_ids' => 'string[]',
        'modifier_list_info' => '\SquareConnect\Model\CatalogItemModifierListInfo[]',
        'image_url' => 'string',
        'variations' => '\SquareConnect\Model\CatalogObject[]',
        'product_type' => 'string',
        'skip_modifier_screen' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'description' => null,
        'abbreviation' => null,
        'label_color' => null,
        'available_online' => null,
        'available_for_pickup' => null,
        'available_electronically' => null,
        'category_id' => null,
        'tax_ids' => null,
        'modifier_list_info' => null,
        'image_url' => null,
        'variations' => null,
        'product_type' => null,
        'skip_modifier_screen' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'abbreviation' => 'abbreviation',
        'label_color' => 'label_color',
        'available_online' => 'available_online',
        'available_for_pickup' => 'available_for_pickup',
        'available_electronically' => 'available_electronically',
        'category_id' => 'category_id',
        'tax_ids' => 'tax_ids',
        'modifier_list_info' => 'modifier_list_info',
        'image_url' => 'image_url',
        'variations' => 'variations',
        'product_type' => 'product_type',
        'skip_modifier_screen' => 'skip_modifier_screen'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'abbreviation' => 'setAbbreviation',
        'label_color' => 'setLabelColor',
        'available_online' => 'setAvailableOnline',
        'available_for_pickup' => 'setAvailableForPickup',
        'available_electronically' => 'setAvailableElectronically',
        'category_id' => 'setCategoryId',
        'tax_ids' => 'setTaxIds',
        'modifier_list_info' => 'setModifierListInfo',
        'image_url' => 'setImageUrl',
        'variations' => 'setVariations',
        'product_type' => 'setProductType',
        'skip_modifier_screen' => 'setSkipModifierScreen'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'abbreviation' => 'getAbbreviation',
        'label_color' => 'getLabelColor',
        'available_online' => 'getAvailableOnline',
        'available_for_pickup' => 'getAvailableForPickup',
        'available_electronically' => 'getAvailableElectronically',
        'category_id' => 'getCategoryId',
        'tax_ids' => 'getTaxIds',
        'modifier_list_info' => 'getModifierListInfo',
        'image_url' => 'getImageUrl',
        'variations' => 'getVariations',
        'product_type' => 'getProductType',
        'skip_modifier_screen' => 'getSkipModifierScreen'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PRODUCT_TYPE_REGULAR = 'REGULAR';
    const PRODUCT_TYPE_GIFT_CARD = 'GIFT_CARD';
    const PRODUCT_TYPE_APPOINTMENTS_SERVICE = 'APPOINTMENTS_SERVICE';
    const PRODUCT_TYPE_RETAIL_ITEM = 'RETAIL_ITEM';
    const PRODUCT_TYPE_RESTAURANT_ITEM = 'RESTAURANT_ITEM';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_REGULAR,
            self::PRODUCT_TYPE_GIFT_CARD,
            self::PRODUCT_TYPE_APPOINTMENTS_SERVICE,
            self::PRODUCT_TYPE_RETAIL_ITEM,
            self::PRODUCT_TYPE_RESTAURANT_ITEM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['abbreviation'] = isset($data['abbreviation']) ? $data['abbreviation'] : null;
        $this->container['label_color'] = isset($data['label_color']) ? $data['label_color'] : null;
        $this->container['available_online'] = isset($data['available_online']) ? $data['available_online'] : null;
        $this->container['available_for_pickup'] = isset($data['available_for_pickup']) ? $data['available_for_pickup'] : null;
        $this->container['available_electronically'] = isset($data['available_electronically']) ? $data['available_electronically'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['tax_ids'] = isset($data['tax_ids']) ? $data['tax_ids'] : null;
        $this->container['modifier_list_info'] = isset($data['modifier_list_info']) ? $data['modifier_list_info'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['skip_modifier_screen'] = isset($data['skip_modifier_screen']) ? $data['skip_modifier_screen'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        $allowed_values = $this->getProductTypeAllowableValues();
        if (!in_array($this->container['product_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        $allowed_values = $this->getProductTypeAllowableValues();
        if (!in_array($this->container['product_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The item's name. Searchable.
     * @return $this
     */
    public function setName($name)
    {

        if ((strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CatalogItem., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description The item's description. Searchable.
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets abbreviation
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     * @param string $abbreviation The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.  Searchable.
     * @return $this
     */
    public function setAbbreviation($abbreviation)
    {
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets label_color
     * @return string
     */
    public function getLabelColor()
    {
        return $this->container['label_color'];
    }

    /**
     * Sets label_color
     * @param string $label_color The color of the item's display label in the Square Point of Sale app.  Searchable.
     * @return $this
     */
    public function setLabelColor($label_color)
    {
        $this->container['label_color'] = $label_color;

        return $this;
    }

    /**
     * Gets available_online
     * @return bool
     */
    public function getAvailableOnline()
    {
        return $this->container['available_online'];
    }

    /**
     * Sets available_online
     * @param bool $available_online If `true`, the item can be added to shipping orders from the merchant's online store.
     * @return $this
     */
    public function setAvailableOnline($available_online)
    {
        $this->container['available_online'] = $available_online;

        return $this;
    }

    /**
     * Gets available_for_pickup
     * @return bool
     */
    public function getAvailableForPickup()
    {
        return $this->container['available_for_pickup'];
    }

    /**
     * Sets available_for_pickup
     * @param bool $available_for_pickup If `true`, the item can be added to pickup orders from the merchant's online store.
     * @return $this
     */
    public function setAvailableForPickup($available_for_pickup)
    {
        $this->container['available_for_pickup'] = $available_for_pickup;

        return $this;
    }

    /**
     * Gets available_electronically
     * @return bool
     */
    public function getAvailableElectronically()
    {
        return $this->container['available_electronically'];
    }

    /**
     * Sets available_electronically
     * @param bool $available_electronically If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
     * @return $this
     */
    public function setAvailableElectronically($available_electronically)
    {
        $this->container['available_electronically'] = $available_electronically;

        return $this;
    }

    /**
     * Gets category_id
     * @return string
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     * @param string $category_id The ID of the item's category, if any.
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets tax_ids
     * @return string[]
     */
    public function getTaxIds()
    {
        return $this->container['tax_ids'];
    }

    /**
     * Sets tax_ids
     * @param string[] $tax_ids A set of IDs indicating the [CatalogTax](#type-catalogtax)es that are enabled for this item. When updating an item, any taxes listed here will be added to the item. [CatalogTax](#type-catalogtax)es may also be added to or deleted from an item using `UpdateItemTaxes`.
     * @return $this
     */
    public function setTaxIds($tax_ids)
    {
        $this->container['tax_ids'] = $tax_ids;

        return $this;
    }

    /**
     * Gets modifier_list_info
     * @return \SquareConnect\Model\CatalogItemModifierListInfo[]
     */
    public function getModifierListInfo()
    {
        return $this->container['modifier_list_info'];
    }

    /**
     * Sets modifier_list_info
     * @param \SquareConnect\Model\CatalogItemModifierListInfo[] $modifier_list_info A set of [CatalogItemModifierListInfo](#type-catalogitemmodifierlistinfo) objects representing the modifier lists that apply to this item, along with the overrides and min and max limits that are specific to this item. [CatalogModifierList](#type-catalogmodifierlist)s may also be added to or deleted from an item using `UpdateItemModifierLists`.
     * @return $this
     */
    public function setModifierListInfo($modifier_list_info)
    {
        $this->container['modifier_list_info'] = $modifier_list_info;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url The URL of an image representing this item.
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets variations
     * @return \SquareConnect\Model\CatalogObject[]
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     * @param \SquareConnect\Model\CatalogObject[] $variations A list of [CatalogObject](#type-catalogobject)s containing the [CatalogItemVariation](#type-catalogitemvariation)s for this item.
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets product_type
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     * @param string $product_type The product type of the item. May not be changed once an item has been created.  Only items of product type `REGULAR` may be created by this API; items with other product types are read-only. See [CatalogItemProductType](#type-catalogitemproducttype) for all possible values.
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowed_values = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets skip_modifier_screen
     * @return bool
     */
    public function getSkipModifierScreen()
    {
        return $this->container['skip_modifier_screen'];
    }

    /**
     * Sets skip_modifier_screen
     * @param bool $skip_modifier_screen If `false`, the Square Point of Sale app will present the [CatalogItem](#type-catalogitem)'s details screen immediately, allowing the merchant to choose [CatalogModifier](#type-catalogmodifier)s before adding the item to the cart.  This is the default behavior.  If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected modifiers, and merchants can edit modifiers by drilling down onto the item's details.  Third-party clients are encouraged to implement similar behaviors.
     * @return $this
     */
    public function setSkipModifierScreen($skip_modifier_screen)
    {
        $this->container['skip_modifier_screen'] = $skip_modifier_screen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


