<?php
/**
 * V1PaymentTax
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1PaymentTax Class Doc Comment
 *
 * @category    Class
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1PaymentTax implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1PaymentTax';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'errors' => '\SquareConnect\Model\Error[]',
        'name' => 'string',
        'applied_money' => '\SquareConnect\Model\V1Money',
        'rate' => 'string',
        'inclusion_type' => 'string',
        'fee_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'errors' => null,
        'name' => null,
        'applied_money' => null,
        'rate' => null,
        'inclusion_type' => null,
        'fee_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'errors' => 'errors',
        'name' => 'name',
        'applied_money' => 'applied_money',
        'rate' => 'rate',
        'inclusion_type' => 'inclusion_type',
        'fee_id' => 'fee_id'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'errors' => 'setErrors',
        'name' => 'setName',
        'applied_money' => 'setAppliedMoney',
        'rate' => 'setRate',
        'inclusion_type' => 'setInclusionType',
        'fee_id' => 'setFeeId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'errors' => 'getErrors',
        'name' => 'getName',
        'applied_money' => 'getAppliedMoney',
        'rate' => 'getRate',
        'inclusion_type' => 'getInclusionType',
        'fee_id' => 'getFeeId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const INCLUSION_TYPE_ADDITIVE = 'ADDITIVE';
    const INCLUSION_TYPE_INCLUSIVE = 'INCLUSIVE';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInclusionTypeAllowableValues()
    {
        return [
            self::INCLUSION_TYPE_ADDITIVE,
            self::INCLUSION_TYPE_INCLUSIVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['errors'] = isset($data['errors']) ? $data['errors'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['applied_money'] = isset($data['applied_money']) ? $data['applied_money'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['inclusion_type'] = isset($data['inclusion_type']) ? $data['inclusion_type'] : null;
        $this->container['fee_id'] = isset($data['fee_id']) ? $data['fee_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getInclusionTypeAllowableValues();
        if (!in_array($this->container['inclusion_type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'inclusion_type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getInclusionTypeAllowableValues();
        if (!in_array($this->container['inclusion_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets errors
     * @return \SquareConnect\Model\Error[]
     */
    public function getErrors()
    {
        return $this->container['errors'];
    }

    /**
     * Sets errors
     * @param \SquareConnect\Model\Error[] $errors Any errors that occurred during the request.
     * @return $this
     */
    public function setErrors($errors)
    {
        $this->container['errors'] = $errors;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The merchant-defined name of the tax.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets applied_money
     * @return \SquareConnect\Model\V1Money
     */
    public function getAppliedMoney()
    {
        return $this->container['applied_money'];
    }

    /**
     * Sets applied_money
     * @param \SquareConnect\Model\V1Money $applied_money The amount of money that this tax adds to the payment.
     * @return $this
     */
    public function setAppliedMoney($applied_money)
    {
        $this->container['applied_money'] = $applied_money;

        return $this;
    }

    /**
     * Gets rate
     * @return string
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param string $rate The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets inclusion_type
     * @return string
     */
    public function getInclusionType()
    {
        return $this->container['inclusion_type'];
    }

    /**
     * Sets inclusion_type
     * @param string $inclusion_type Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
     * @return $this
     */
    public function setInclusionType($inclusion_type)
    {
        $allowed_values = $this->getInclusionTypeAllowableValues();
        if (!is_null($inclusion_type) && !in_array($inclusion_type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inclusion_type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['inclusion_type'] = $inclusion_type;

        return $this;
    }

    /**
     * Gets fee_id
     * @return string
     */
    public function getFeeId()
    {
        return $this->container['fee_id'];
    }

    /**
     * Sets fee_id
     * @param string $fee_id The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
     * @return $this
     */
    public function setFeeId($fee_id)
    {
        $this->container['fee_id'] = $fee_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


