<?php
/**
 * SearchCatalogObjectsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * SearchCatalogObjectsRequest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SearchCatalogObjectsRequest implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SearchCatalogObjectsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cursor' => 'string',
        'object_types' => 'string[]',
        'include_deleted_objects' => 'bool',
        'include_related_objects' => 'bool',
        'begin_time' => 'string',
        'query' => '\SquareConnect\Model\CatalogQuery',
        'limit' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cursor' => null,
        'object_types' => null,
        'include_deleted_objects' => null,
        'include_related_objects' => null,
        'begin_time' => null,
        'query' => null,
        'limit' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cursor' => 'cursor',
        'object_types' => 'object_types',
        'include_deleted_objects' => 'include_deleted_objects',
        'include_related_objects' => 'include_related_objects',
        'begin_time' => 'begin_time',
        'query' => 'query',
        'limit' => 'limit'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cursor' => 'setCursor',
        'object_types' => 'setObjectTypes',
        'include_deleted_objects' => 'setIncludeDeletedObjects',
        'include_related_objects' => 'setIncludeRelatedObjects',
        'begin_time' => 'setBeginTime',
        'query' => 'setQuery',
        'limit' => 'setLimit'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cursor' => 'getCursor',
        'object_types' => 'getObjectTypes',
        'include_deleted_objects' => 'getIncludeDeletedObjects',
        'include_related_objects' => 'getIncludeRelatedObjects',
        'begin_time' => 'getBeginTime',
        'query' => 'getQuery',
        'limit' => 'getLimit'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const OBJECT_TYPES_ITEM = 'ITEM';
    const OBJECT_TYPES_CATEGORY = 'CATEGORY';
    const OBJECT_TYPES_ITEM_VARIATION = 'ITEM_VARIATION';
    const OBJECT_TYPES_TAX = 'TAX';
    const OBJECT_TYPES_DISCOUNT = 'DISCOUNT';
    const OBJECT_TYPES_MODIFIER_LIST = 'MODIFIER_LIST';
    const OBJECT_TYPES_MODIFIER = 'MODIFIER';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getObjectTypesAllowableValues()
    {
        return [
            self::OBJECT_TYPES_ITEM,
            self::OBJECT_TYPES_CATEGORY,
            self::OBJECT_TYPES_ITEM_VARIATION,
            self::OBJECT_TYPES_TAX,
            self::OBJECT_TYPES_DISCOUNT,
            self::OBJECT_TYPES_MODIFIER_LIST,
            self::OBJECT_TYPES_MODIFIER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cursor'] = isset($data['cursor']) ? $data['cursor'] : null;
        $this->container['object_types'] = isset($data['object_types']) ? $data['object_types'] : null;
        $this->container['include_deleted_objects'] = isset($data['include_deleted_objects']) ? $data['include_deleted_objects'] : null;
        $this->container['include_related_objects'] = isset($data['include_related_objects']) ? $data['include_related_objects'] : null;
        $this->container['begin_time'] = isset($data['begin_time']) ? $data['begin_time'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cursor
     * @return string
     */
    public function getCursor()
    {
        return $this->container['cursor'];
    }

    /**
     * Sets cursor
     * @param string $cursor The pagination cursor returned in the previous response. Leave unset for an initial request. See [Paginating results](#paginatingresults) for more information.
     * @return $this
     */
    public function setCursor($cursor)
    {
        $this->container['cursor'] = $cursor;

        return $this;
    }

    /**
     * Gets object_types
     * @return string[]
     */
    public function getObjectTypes()
    {
        return $this->container['object_types'];
    }

    /**
     * Sets object_types
     * @param string[] $object_types The desired set of object types to apper in the search results. The legal values are taken from the [CatalogObjectType](#type-catalogobjecttype) enumeration, namely `\"ITEM\"`, `\"ITEM_VARIATION\"`, `\"CATEGORY\"`, `\"DISCOUNT\"`, `\"TAX\"`, `\"MODIFIER\"`, or `\"MODIFIER_LIST\"`.
     * @return $this
     */
    public function setObjectTypes($object_types)
    {
        $allowed_values = $this->getObjectTypesAllowableValues();
        if (!is_null($object_types) && array_diff($object_types, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'object_types', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['object_types'] = $object_types;

        return $this;
    }

    /**
     * Gets include_deleted_objects
     * @return bool
     */
    public function getIncludeDeletedObjects()
    {
        return $this->container['include_deleted_objects'];
    }

    /**
     * Sets include_deleted_objects
     * @param bool $include_deleted_objects If `true`, deleted objects will be included in the results. Deleted objects will have their `is_deleted` field set to `true`.
     * @return $this
     */
    public function setIncludeDeletedObjects($include_deleted_objects)
    {
        $this->container['include_deleted_objects'] = $include_deleted_objects;

        return $this;
    }

    /**
     * Gets include_related_objects
     * @return bool
     */
    public function getIncludeRelatedObjects()
    {
        return $this->container['include_related_objects'];
    }

    /**
     * Sets include_related_objects
     * @param bool $include_related_objects If `true`, the response will include additional objects that are related to the requested object, as follows:  If a [CatalogItem](#type-catalogitem) is returned in the object field of the response, its associated [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax)es, and [CatalogModifierList](#type-catalogmodifierlist)s will be included in the `related_objects` field of the response.  If a [CatalogItemVariation](#type-catalogitemvariation) is returned in the object field of the response, its parent [CatalogItem](#type-catalogitem) will be included in the `related_objects` field of the response.
     * @return $this
     */
    public function setIncludeRelatedObjects($include_related_objects)
    {
        $this->container['include_related_objects'] = $include_related_objects;

        return $this;
    }

    /**
     * Gets begin_time
     * @return string
     */
    public function getBeginTime()
    {
        return $this->container['begin_time'];
    }

    /**
     * Sets begin_time
     * @param string $begin_time Return only objects that have been modified after this [timestamp](#workingwithdates) (in RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\").
     * @return $this
     */
    public function setBeginTime($begin_time)
    {
        $this->container['begin_time'] = $begin_time;

        return $this;
    }

    /**
     * Gets query
     * @return \SquareConnect\Model\CatalogQuery
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     * @param \SquareConnect\Model\CatalogQuery $query A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets limit
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param int $limit A limit on the number of results to be returned in a single page. The limit is advisory - the implementation may return more or fewer results. If the supplied limit is negative, zero, or is higher than the maximum limit of 1,000, it will be ignored.
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


