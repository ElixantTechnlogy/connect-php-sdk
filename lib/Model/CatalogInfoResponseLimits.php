<?php
/**
 * CatalogInfoResponseLimits
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogInfoResponseLimits Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogInfoResponseLimits implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogInfoResponseLimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batch_upsert_max_objects_per_batch' => 'int',
        'batch_upsert_max_total_objects' => 'int',
        'batch_retrieve_max_object_ids' => 'int',
        'search_max_page_limit' => 'int',
        'batch_delete_max_object_ids' => 'int',
        'update_item_taxes_max_item_ids' => 'int',
        'update_item_taxes_max_taxes_to_enable' => 'int',
        'update_item_taxes_max_taxes_to_disable' => 'int',
        'update_item_modifier_lists_max_item_ids' => 'int',
        'update_item_modifier_lists_max_modifier_lists_to_enable' => 'int',
        'update_item_modifier_lists_max_modifier_lists_to_disable' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batch_upsert_max_objects_per_batch' => null,
        'batch_upsert_max_total_objects' => null,
        'batch_retrieve_max_object_ids' => null,
        'search_max_page_limit' => null,
        'batch_delete_max_object_ids' => null,
        'update_item_taxes_max_item_ids' => null,
        'update_item_taxes_max_taxes_to_enable' => null,
        'update_item_taxes_max_taxes_to_disable' => null,
        'update_item_modifier_lists_max_item_ids' => null,
        'update_item_modifier_lists_max_modifier_lists_to_enable' => null,
        'update_item_modifier_lists_max_modifier_lists_to_disable' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_upsert_max_objects_per_batch' => 'batch_upsert_max_objects_per_batch',
        'batch_upsert_max_total_objects' => 'batch_upsert_max_total_objects',
        'batch_retrieve_max_object_ids' => 'batch_retrieve_max_object_ids',
        'search_max_page_limit' => 'search_max_page_limit',
        'batch_delete_max_object_ids' => 'batch_delete_max_object_ids',
        'update_item_taxes_max_item_ids' => 'update_item_taxes_max_item_ids',
        'update_item_taxes_max_taxes_to_enable' => 'update_item_taxes_max_taxes_to_enable',
        'update_item_taxes_max_taxes_to_disable' => 'update_item_taxes_max_taxes_to_disable',
        'update_item_modifier_lists_max_item_ids' => 'update_item_modifier_lists_max_item_ids',
        'update_item_modifier_lists_max_modifier_lists_to_enable' => 'update_item_modifier_lists_max_modifier_lists_to_enable',
        'update_item_modifier_lists_max_modifier_lists_to_disable' => 'update_item_modifier_lists_max_modifier_lists_to_disable'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'batch_upsert_max_objects_per_batch' => 'setBatchUpsertMaxObjectsPerBatch',
        'batch_upsert_max_total_objects' => 'setBatchUpsertMaxTotalObjects',
        'batch_retrieve_max_object_ids' => 'setBatchRetrieveMaxObjectIds',
        'search_max_page_limit' => 'setSearchMaxPageLimit',
        'batch_delete_max_object_ids' => 'setBatchDeleteMaxObjectIds',
        'update_item_taxes_max_item_ids' => 'setUpdateItemTaxesMaxItemIds',
        'update_item_taxes_max_taxes_to_enable' => 'setUpdateItemTaxesMaxTaxesToEnable',
        'update_item_taxes_max_taxes_to_disable' => 'setUpdateItemTaxesMaxTaxesToDisable',
        'update_item_modifier_lists_max_item_ids' => 'setUpdateItemModifierListsMaxItemIds',
        'update_item_modifier_lists_max_modifier_lists_to_enable' => 'setUpdateItemModifierListsMaxModifierListsToEnable',
        'update_item_modifier_lists_max_modifier_lists_to_disable' => 'setUpdateItemModifierListsMaxModifierListsToDisable'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'batch_upsert_max_objects_per_batch' => 'getBatchUpsertMaxObjectsPerBatch',
        'batch_upsert_max_total_objects' => 'getBatchUpsertMaxTotalObjects',
        'batch_retrieve_max_object_ids' => 'getBatchRetrieveMaxObjectIds',
        'search_max_page_limit' => 'getSearchMaxPageLimit',
        'batch_delete_max_object_ids' => 'getBatchDeleteMaxObjectIds',
        'update_item_taxes_max_item_ids' => 'getUpdateItemTaxesMaxItemIds',
        'update_item_taxes_max_taxes_to_enable' => 'getUpdateItemTaxesMaxTaxesToEnable',
        'update_item_taxes_max_taxes_to_disable' => 'getUpdateItemTaxesMaxTaxesToDisable',
        'update_item_modifier_lists_max_item_ids' => 'getUpdateItemModifierListsMaxItemIds',
        'update_item_modifier_lists_max_modifier_lists_to_enable' => 'getUpdateItemModifierListsMaxModifierListsToEnable',
        'update_item_modifier_lists_max_modifier_lists_to_disable' => 'getUpdateItemModifierListsMaxModifierListsToDisable'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_upsert_max_objects_per_batch'] = isset($data['batch_upsert_max_objects_per_batch']) ? $data['batch_upsert_max_objects_per_batch'] : null;
        $this->container['batch_upsert_max_total_objects'] = isset($data['batch_upsert_max_total_objects']) ? $data['batch_upsert_max_total_objects'] : null;
        $this->container['batch_retrieve_max_object_ids'] = isset($data['batch_retrieve_max_object_ids']) ? $data['batch_retrieve_max_object_ids'] : null;
        $this->container['search_max_page_limit'] = isset($data['search_max_page_limit']) ? $data['search_max_page_limit'] : null;
        $this->container['batch_delete_max_object_ids'] = isset($data['batch_delete_max_object_ids']) ? $data['batch_delete_max_object_ids'] : null;
        $this->container['update_item_taxes_max_item_ids'] = isset($data['update_item_taxes_max_item_ids']) ? $data['update_item_taxes_max_item_ids'] : null;
        $this->container['update_item_taxes_max_taxes_to_enable'] = isset($data['update_item_taxes_max_taxes_to_enable']) ? $data['update_item_taxes_max_taxes_to_enable'] : null;
        $this->container['update_item_taxes_max_taxes_to_disable'] = isset($data['update_item_taxes_max_taxes_to_disable']) ? $data['update_item_taxes_max_taxes_to_disable'] : null;
        $this->container['update_item_modifier_lists_max_item_ids'] = isset($data['update_item_modifier_lists_max_item_ids']) ? $data['update_item_modifier_lists_max_item_ids'] : null;
        $this->container['update_item_modifier_lists_max_modifier_lists_to_enable'] = isset($data['update_item_modifier_lists_max_modifier_lists_to_enable']) ? $data['update_item_modifier_lists_max_modifier_lists_to_enable'] : null;
        $this->container['update_item_modifier_lists_max_modifier_lists_to_disable'] = isset($data['update_item_modifier_lists_max_modifier_lists_to_disable']) ? $data['update_item_modifier_lists_max_modifier_lists_to_disable'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets batch_upsert_max_objects_per_batch
     * @return int
     */
    public function getBatchUpsertMaxObjectsPerBatch()
    {
        return $this->container['batch_upsert_max_objects_per_batch'];
    }

    /**
     * Sets batch_upsert_max_objects_per_batch
     * @param int $batch_upsert_max_objects_per_batch The maximum number of objects that may appear within a single batch in a `/v2/catalog/batch-upsert` request.
     * @return $this
     */
    public function setBatchUpsertMaxObjectsPerBatch($batch_upsert_max_objects_per_batch)
    {
        $this->container['batch_upsert_max_objects_per_batch'] = $batch_upsert_max_objects_per_batch;

        return $this;
    }

    /**
     * Gets batch_upsert_max_total_objects
     * @return int
     */
    public function getBatchUpsertMaxTotalObjects()
    {
        return $this->container['batch_upsert_max_total_objects'];
    }

    /**
     * Sets batch_upsert_max_total_objects
     * @param int $batch_upsert_max_total_objects The maximum number of objects that may appear across all batches in a `/v2/catalog/batch-upsert` request.
     * @return $this
     */
    public function setBatchUpsertMaxTotalObjects($batch_upsert_max_total_objects)
    {
        $this->container['batch_upsert_max_total_objects'] = $batch_upsert_max_total_objects;

        return $this;
    }

    /**
     * Gets batch_retrieve_max_object_ids
     * @return int
     */
    public function getBatchRetrieveMaxObjectIds()
    {
        return $this->container['batch_retrieve_max_object_ids'];
    }

    /**
     * Sets batch_retrieve_max_object_ids
     * @param int $batch_retrieve_max_object_ids The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve` request.
     * @return $this
     */
    public function setBatchRetrieveMaxObjectIds($batch_retrieve_max_object_ids)
    {
        $this->container['batch_retrieve_max_object_ids'] = $batch_retrieve_max_object_ids;

        return $this;
    }

    /**
     * Gets search_max_page_limit
     * @return int
     */
    public function getSearchMaxPageLimit()
    {
        return $this->container['search_max_page_limit'];
    }

    /**
     * Sets search_max_page_limit
     * @param int $search_max_page_limit The maximum number of results that may be returned in a page of a `/v2/catalog/search` response.
     * @return $this
     */
    public function setSearchMaxPageLimit($search_max_page_limit)
    {
        $this->container['search_max_page_limit'] = $search_max_page_limit;

        return $this;
    }

    /**
     * Gets batch_delete_max_object_ids
     * @return int
     */
    public function getBatchDeleteMaxObjectIds()
    {
        return $this->container['batch_delete_max_object_ids'];
    }

    /**
     * Sets batch_delete_max_object_ids
     * @param int $batch_delete_max_object_ids The maximum number of object IDs that may be included in a single `/v2/catalog/batch-delete` request.
     * @return $this
     */
    public function setBatchDeleteMaxObjectIds($batch_delete_max_object_ids)
    {
        $this->container['batch_delete_max_object_ids'] = $batch_delete_max_object_ids;

        return $this;
    }

    /**
     * Gets update_item_taxes_max_item_ids
     * @return int
     */
    public function getUpdateItemTaxesMaxItemIds()
    {
        return $this->container['update_item_taxes_max_item_ids'];
    }

    /**
     * Sets update_item_taxes_max_item_ids
     * @param int $update_item_taxes_max_item_ids The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @return $this
     */
    public function setUpdateItemTaxesMaxItemIds($update_item_taxes_max_item_ids)
    {
        $this->container['update_item_taxes_max_item_ids'] = $update_item_taxes_max_item_ids;

        return $this;
    }

    /**
     * Gets update_item_taxes_max_taxes_to_enable
     * @return int
     */
    public function getUpdateItemTaxesMaxTaxesToEnable()
    {
        return $this->container['update_item_taxes_max_taxes_to_enable'];
    }

    /**
     * Sets update_item_taxes_max_taxes_to_enable
     * @param int $update_item_taxes_max_taxes_to_enable The maximum number of tax IDs to be enabled that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @return $this
     */
    public function setUpdateItemTaxesMaxTaxesToEnable($update_item_taxes_max_taxes_to_enable)
    {
        $this->container['update_item_taxes_max_taxes_to_enable'] = $update_item_taxes_max_taxes_to_enable;

        return $this;
    }

    /**
     * Gets update_item_taxes_max_taxes_to_disable
     * @return int
     */
    public function getUpdateItemTaxesMaxTaxesToDisable()
    {
        return $this->container['update_item_taxes_max_taxes_to_disable'];
    }

    /**
     * Sets update_item_taxes_max_taxes_to_disable
     * @param int $update_item_taxes_max_taxes_to_disable The maximum number of tax IDs to be disabled that may be included in a single `/v2/catalog/update-item-taxes` request.
     * @return $this
     */
    public function setUpdateItemTaxesMaxTaxesToDisable($update_item_taxes_max_taxes_to_disable)
    {
        $this->container['update_item_taxes_max_taxes_to_disable'] = $update_item_taxes_max_taxes_to_disable;

        return $this;
    }

    /**
     * Gets update_item_modifier_lists_max_item_ids
     * @return int
     */
    public function getUpdateItemModifierListsMaxItemIds()
    {
        return $this->container['update_item_modifier_lists_max_item_ids'];
    }

    /**
     * Sets update_item_modifier_lists_max_item_ids
     * @param int $update_item_modifier_lists_max_item_ids The maximum number of item IDs that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @return $this
     */
    public function setUpdateItemModifierListsMaxItemIds($update_item_modifier_lists_max_item_ids)
    {
        $this->container['update_item_modifier_lists_max_item_ids'] = $update_item_modifier_lists_max_item_ids;

        return $this;
    }

    /**
     * Gets update_item_modifier_lists_max_modifier_lists_to_enable
     * @return int
     */
    public function getUpdateItemModifierListsMaxModifierListsToEnable()
    {
        return $this->container['update_item_modifier_lists_max_modifier_lists_to_enable'];
    }

    /**
     * Sets update_item_modifier_lists_max_modifier_lists_to_enable
     * @param int $update_item_modifier_lists_max_modifier_lists_to_enable The maximum number of modifier list IDs to be enabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @return $this
     */
    public function setUpdateItemModifierListsMaxModifierListsToEnable($update_item_modifier_lists_max_modifier_lists_to_enable)
    {
        $this->container['update_item_modifier_lists_max_modifier_lists_to_enable'] = $update_item_modifier_lists_max_modifier_lists_to_enable;

        return $this;
    }

    /**
     * Gets update_item_modifier_lists_max_modifier_lists_to_disable
     * @return int
     */
    public function getUpdateItemModifierListsMaxModifierListsToDisable()
    {
        return $this->container['update_item_modifier_lists_max_modifier_lists_to_disable'];
    }

    /**
     * Sets update_item_modifier_lists_max_modifier_lists_to_disable
     * @param int $update_item_modifier_lists_max_modifier_lists_to_disable The maximum number of modifier list IDs to be disabled that may be included in a single `/v2/catalog/update-item-modifier-lists` request.
     * @return $this
     */
    public function setUpdateItemModifierListsMaxModifierListsToDisable($update_item_modifier_lists_max_modifier_lists_to_disable)
    {
        $this->container['update_item_modifier_lists_max_modifier_lists_to_disable'] = $update_item_modifier_lists_max_modifier_lists_to_disable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


