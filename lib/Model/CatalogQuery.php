<?php
/**
 * CatalogQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * CatalogQuery Class Doc Comment
 *
 * @category    Class
 * @description A query to be applied to a [SearchCatalogObjectsRequest](#type-searchcatalogobjectsrequest) request. Only one query field may be present.  Where an attribute name is required, it should be specified as the name of any field marked \&quot;searchable\&quot; from the structured data types for the desired result object type(s) ([CatalogItem](#type-catalogitem), [CatalogItemVariation](#type-catalogitemvariation), [CatalogCategory](#type-catalogcategory), [CatalogTax](#type-catalogtax), [CatalogDiscount](#type-catalogdiscount), [CatalogModifierList](#type-catalogmodifierlist), or [CatalogModifier](#type-catalogmodifier)).  For example, a query that should return Items may specify an attribute names from any of the searchable fields of the [CatalogItem](#type-catalogitem) data type, namely &#x60;\&quot;name\&quot;&#x60;, &#x60;\&quot;description\&quot;&#x60;, and &#x60;\&quot;abbreviation\&quot;&#x60;.
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CatalogQuery implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CatalogQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sorted_attribute_query' => '\SquareConnect\Model\CatalogQuerySortedAttribute',
        'exact_query' => '\SquareConnect\Model\CatalogQueryExact',
        'prefix_query' => '\SquareConnect\Model\CatalogQueryPrefix',
        'range_query' => '\SquareConnect\Model\CatalogQueryRange',
        'text_query' => '\SquareConnect\Model\CatalogQueryText',
        'items_for_tax_query' => '\SquareConnect\Model\CatalogQueryItemsForTax',
        'items_for_modifier_list_query' => '\SquareConnect\Model\CatalogQueryItemsForModifierList'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sorted_attribute_query' => null,
        'exact_query' => null,
        'prefix_query' => null,
        'range_query' => null,
        'text_query' => null,
        'items_for_tax_query' => null,
        'items_for_modifier_list_query' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'sorted_attribute_query' => 'sorted_attribute_query',
        'exact_query' => 'exact_query',
        'prefix_query' => 'prefix_query',
        'range_query' => 'range_query',
        'text_query' => 'text_query',
        'items_for_tax_query' => 'items_for_tax_query',
        'items_for_modifier_list_query' => 'items_for_modifier_list_query'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'sorted_attribute_query' => 'setSortedAttributeQuery',
        'exact_query' => 'setExactQuery',
        'prefix_query' => 'setPrefixQuery',
        'range_query' => 'setRangeQuery',
        'text_query' => 'setTextQuery',
        'items_for_tax_query' => 'setItemsForTaxQuery',
        'items_for_modifier_list_query' => 'setItemsForModifierListQuery'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'sorted_attribute_query' => 'getSortedAttributeQuery',
        'exact_query' => 'getExactQuery',
        'prefix_query' => 'getPrefixQuery',
        'range_query' => 'getRangeQuery',
        'text_query' => 'getTextQuery',
        'items_for_tax_query' => 'getItemsForTaxQuery',
        'items_for_modifier_list_query' => 'getItemsForModifierListQuery'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sorted_attribute_query'] = isset($data['sorted_attribute_query']) ? $data['sorted_attribute_query'] : null;
        $this->container['exact_query'] = isset($data['exact_query']) ? $data['exact_query'] : null;
        $this->container['prefix_query'] = isset($data['prefix_query']) ? $data['prefix_query'] : null;
        $this->container['range_query'] = isset($data['range_query']) ? $data['range_query'] : null;
        $this->container['text_query'] = isset($data['text_query']) ? $data['text_query'] : null;
        $this->container['items_for_tax_query'] = isset($data['items_for_tax_query']) ? $data['items_for_tax_query'] : null;
        $this->container['items_for_modifier_list_query'] = isset($data['items_for_modifier_list_query']) ? $data['items_for_modifier_list_query'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets sorted_attribute_query
     * @return \SquareConnect\Model\CatalogQuerySortedAttribute
     */
    public function getSortedAttributeQuery()
    {
        return $this->container['sorted_attribute_query'];
    }

    /**
     * Sets sorted_attribute_query
     * @param \SquareConnect\Model\CatalogQuerySortedAttribute $sorted_attribute_query A query that returns all objects, sorted by the given attribute.
     * @return $this
     */
    public function setSortedAttributeQuery($sorted_attribute_query)
    {
        $this->container['sorted_attribute_query'] = $sorted_attribute_query;

        return $this;
    }

    /**
     * Gets exact_query
     * @return \SquareConnect\Model\CatalogQueryExact
     */
    public function getExactQuery()
    {
        return $this->container['exact_query'];
    }

    /**
     * Sets exact_query
     * @param \SquareConnect\Model\CatalogQueryExact $exact_query A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive value.
     * @return $this
     */
    public function setExactQuery($exact_query)
    {
        $this->container['exact_query'] = $exact_query;

        return $this;
    }

    /**
     * Gets prefix_query
     * @return \SquareConnect\Model\CatalogQueryPrefix
     */
    public function getPrefixQuery()
    {
        return $this->container['prefix_query'];
    }

    /**
     * Sets prefix_query
     * @param \SquareConnect\Model\CatalogQueryPrefix $prefix_query A query that returns only objects for which the given (string-valued) attribute has the given case-insensitive prefix.
     * @return $this
     */
    public function setPrefixQuery($prefix_query)
    {
        $this->container['prefix_query'] = $prefix_query;

        return $this;
    }

    /**
     * Gets range_query
     * @return \SquareConnect\Model\CatalogQueryRange
     */
    public function getRangeQuery()
    {
        return $this->container['range_query'];
    }

    /**
     * Sets range_query
     * @param \SquareConnect\Model\CatalogQueryRange $range_query A query that returns only objects for which the given (integer-valued) attribute lies in the given range.
     * @return $this
     */
    public function setRangeQuery($range_query)
    {
        $this->container['range_query'] = $range_query;

        return $this;
    }

    /**
     * Gets text_query
     * @return \SquareConnect\Model\CatalogQueryText
     */
    public function getTextQuery()
    {
        return $this->container['text_query'];
    }

    /**
     * Sets text_query
     * @param \SquareConnect\Model\CatalogQueryText $text_query A query that returns only objects whose searchable attributes contain all of the given keywords as prefixes. For example, if a [CatalogItem](#type-catalogitem) contains attributes `{\"name\": \"t-shirt\"}` and `{\"description\": \"Small, Red\"}`, it will be matched by the query `{\"keywords\": [\"shirt\", \"sm\", \"re\"]}`.
     * @return $this
     */
    public function setTextQuery($text_query)
    {
        $this->container['text_query'] = $text_query;

        return $this;
    }

    /**
     * Gets items_for_tax_query
     * @return \SquareConnect\Model\CatalogQueryItemsForTax
     */
    public function getItemsForTaxQuery()
    {
        return $this->container['items_for_tax_query'];
    }

    /**
     * Sets items_for_tax_query
     * @param \SquareConnect\Model\CatalogQueryItemsForTax $items_for_tax_query A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogTax](#type-catalogtax)es enabled.
     * @return $this
     */
    public function setItemsForTaxQuery($items_for_tax_query)
    {
        $this->container['items_for_tax_query'] = $items_for_tax_query;

        return $this;
    }

    /**
     * Gets items_for_modifier_list_query
     * @return \SquareConnect\Model\CatalogQueryItemsForModifierList
     */
    public function getItemsForModifierListQuery()
    {
        return $this->container['items_for_modifier_list_query'];
    }

    /**
     * Sets items_for_modifier_list_query
     * @param \SquareConnect\Model\CatalogQueryItemsForModifierList $items_for_modifier_list_query A query that returns all [CatalogItem](#type-catalogitem)s that have any of the given [CatalogModifierList](#type-catalogmodifierlist)s enabled.
     * @return $this
     */
    public function setItemsForModifierListQuery($items_for_modifier_list_query)
    {
        $this->container['items_for_modifier_list_query'] = $items_for_modifier_list_query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


