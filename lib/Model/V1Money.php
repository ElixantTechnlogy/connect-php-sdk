<?php
/**
 * V1Money
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1Money Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1Money implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1Money';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'int',
        'currency_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
        'currency_code' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'currency_code' => 'currency_code'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'currency_code' => 'setCurrencyCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'currency_code' => 'getCurrencyCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CURRENCY_CODE_AED = 'AED';
    const CURRENCY_CODE_AFN = 'AFN';
    const CURRENCY_CODE_ALL = 'ALL';
    const CURRENCY_CODE_AMD = 'AMD';
    const CURRENCY_CODE_ANG = 'ANG';
    const CURRENCY_CODE_AOA = 'AOA';
    const CURRENCY_CODE_ARS = 'ARS';
    const CURRENCY_CODE_AUD = 'AUD';
    const CURRENCY_CODE_AWG = 'AWG';
    const CURRENCY_CODE_AZN = 'AZN';
    const CURRENCY_CODE_BAM = 'BAM';
    const CURRENCY_CODE_BBD = 'BBD';
    const CURRENCY_CODE_BDT = 'BDT';
    const CURRENCY_CODE_BGN = 'BGN';
    const CURRENCY_CODE_BHD = 'BHD';
    const CURRENCY_CODE_BIF = 'BIF';
    const CURRENCY_CODE_BMD = 'BMD';
    const CURRENCY_CODE_BND = 'BND';
    const CURRENCY_CODE_BOB = 'BOB';
    const CURRENCY_CODE_BOV = 'BOV';
    const CURRENCY_CODE_BRL = 'BRL';
    const CURRENCY_CODE_BSD = 'BSD';
    const CURRENCY_CODE_BTN = 'BTN';
    const CURRENCY_CODE_BWP = 'BWP';
    const CURRENCY_CODE_BYR = 'BYR';
    const CURRENCY_CODE_BZD = 'BZD';
    const CURRENCY_CODE_CAD = 'CAD';
    const CURRENCY_CODE_CDF = 'CDF';
    const CURRENCY_CODE_CHE = 'CHE';
    const CURRENCY_CODE_CHF = 'CHF';
    const CURRENCY_CODE_CHW = 'CHW';
    const CURRENCY_CODE_CLF = 'CLF';
    const CURRENCY_CODE_CLP = 'CLP';
    const CURRENCY_CODE_CNY = 'CNY';
    const CURRENCY_CODE_COP = 'COP';
    const CURRENCY_CODE_COU = 'COU';
    const CURRENCY_CODE_CRC = 'CRC';
    const CURRENCY_CODE_CUC = 'CUC';
    const CURRENCY_CODE_CUP = 'CUP';
    const CURRENCY_CODE_CVE = 'CVE';
    const CURRENCY_CODE_CZK = 'CZK';
    const CURRENCY_CODE_DJF = 'DJF';
    const CURRENCY_CODE_DKK = 'DKK';
    const CURRENCY_CODE_DOP = 'DOP';
    const CURRENCY_CODE_DZD = 'DZD';
    const CURRENCY_CODE_EGP = 'EGP';
    const CURRENCY_CODE_ERN = 'ERN';
    const CURRENCY_CODE_ETB = 'ETB';
    const CURRENCY_CODE_EUR = 'EUR';
    const CURRENCY_CODE_FJD = 'FJD';
    const CURRENCY_CODE_FKP = 'FKP';
    const CURRENCY_CODE_GBP = 'GBP';
    const CURRENCY_CODE_GEL = 'GEL';
    const CURRENCY_CODE_GHS = 'GHS';
    const CURRENCY_CODE_GIP = 'GIP';
    const CURRENCY_CODE_GMD = 'GMD';
    const CURRENCY_CODE_GNF = 'GNF';
    const CURRENCY_CODE_GTQ = 'GTQ';
    const CURRENCY_CODE_GYD = 'GYD';
    const CURRENCY_CODE_HKD = 'HKD';
    const CURRENCY_CODE_HNL = 'HNL';
    const CURRENCY_CODE_HRK = 'HRK';
    const CURRENCY_CODE_HTG = 'HTG';
    const CURRENCY_CODE_HUF = 'HUF';
    const CURRENCY_CODE_IDR = 'IDR';
    const CURRENCY_CODE_ILS = 'ILS';
    const CURRENCY_CODE_INR = 'INR';
    const CURRENCY_CODE_IQD = 'IQD';
    const CURRENCY_CODE_IRR = 'IRR';
    const CURRENCY_CODE_ISK = 'ISK';
    const CURRENCY_CODE_JMD = 'JMD';
    const CURRENCY_CODE_JOD = 'JOD';
    const CURRENCY_CODE_JPY = 'JPY';
    const CURRENCY_CODE_KES = 'KES';
    const CURRENCY_CODE_KGS = 'KGS';
    const CURRENCY_CODE_KHR = 'KHR';
    const CURRENCY_CODE_KMF = 'KMF';
    const CURRENCY_CODE_KPW = 'KPW';
    const CURRENCY_CODE_KRW = 'KRW';
    const CURRENCY_CODE_KWD = 'KWD';
    const CURRENCY_CODE_KYD = 'KYD';
    const CURRENCY_CODE_KZT = 'KZT';
    const CURRENCY_CODE_LAK = 'LAK';
    const CURRENCY_CODE_LBP = 'LBP';
    const CURRENCY_CODE_LKR = 'LKR';
    const CURRENCY_CODE_LRD = 'LRD';
    const CURRENCY_CODE_LSL = 'LSL';
    const CURRENCY_CODE_LTL = 'LTL';
    const CURRENCY_CODE_LVL = 'LVL';
    const CURRENCY_CODE_LYD = 'LYD';
    const CURRENCY_CODE_MAD = 'MAD';
    const CURRENCY_CODE_MDL = 'MDL';
    const CURRENCY_CODE_MGA = 'MGA';
    const CURRENCY_CODE_MKD = 'MKD';
    const CURRENCY_CODE_MMK = 'MMK';
    const CURRENCY_CODE_MNT = 'MNT';
    const CURRENCY_CODE_MOP = 'MOP';
    const CURRENCY_CODE_MRO = 'MRO';
    const CURRENCY_CODE_MUR = 'MUR';
    const CURRENCY_CODE_MVR = 'MVR';
    const CURRENCY_CODE_MWK = 'MWK';
    const CURRENCY_CODE_MXN = 'MXN';
    const CURRENCY_CODE_MXV = 'MXV';
    const CURRENCY_CODE_MYR = 'MYR';
    const CURRENCY_CODE_MZN = 'MZN';
    const CURRENCY_CODE_NAD = 'NAD';
    const CURRENCY_CODE_NGN = 'NGN';
    const CURRENCY_CODE_NIO = 'NIO';
    const CURRENCY_CODE_NOK = 'NOK';
    const CURRENCY_CODE_NPR = 'NPR';
    const CURRENCY_CODE_NZD = 'NZD';
    const CURRENCY_CODE_OMR = 'OMR';
    const CURRENCY_CODE_PAB = 'PAB';
    const CURRENCY_CODE_PEN = 'PEN';
    const CURRENCY_CODE_PGK = 'PGK';
    const CURRENCY_CODE_PHP = 'PHP';
    const CURRENCY_CODE_PKR = 'PKR';
    const CURRENCY_CODE_PLN = 'PLN';
    const CURRENCY_CODE_PYG = 'PYG';
    const CURRENCY_CODE_QAR = 'QAR';
    const CURRENCY_CODE_RON = 'RON';
    const CURRENCY_CODE_RSD = 'RSD';
    const CURRENCY_CODE_RUB = 'RUB';
    const CURRENCY_CODE_RWF = 'RWF';
    const CURRENCY_CODE_SAR = 'SAR';
    const CURRENCY_CODE_SBD = 'SBD';
    const CURRENCY_CODE_SCR = 'SCR';
    const CURRENCY_CODE_SDG = 'SDG';
    const CURRENCY_CODE_SEK = 'SEK';
    const CURRENCY_CODE_SGD = 'SGD';
    const CURRENCY_CODE_SHP = 'SHP';
    const CURRENCY_CODE_SLL = 'SLL';
    const CURRENCY_CODE_SOS = 'SOS';
    const CURRENCY_CODE_SRD = 'SRD';
    const CURRENCY_CODE_SSP = 'SSP';
    const CURRENCY_CODE_STD = 'STD';
    const CURRENCY_CODE_SVC = 'SVC';
    const CURRENCY_CODE_SYP = 'SYP';
    const CURRENCY_CODE_SZL = 'SZL';
    const CURRENCY_CODE_THB = 'THB';
    const CURRENCY_CODE_TJS = 'TJS';
    const CURRENCY_CODE_TMT = 'TMT';
    const CURRENCY_CODE_TND = 'TND';
    const CURRENCY_CODE_TOP = 'TOP';
    const CURRENCY_CODE_TRY = 'TRY';
    const CURRENCY_CODE_TTD = 'TTD';
    const CURRENCY_CODE_TWD = 'TWD';
    const CURRENCY_CODE_TZS = 'TZS';
    const CURRENCY_CODE_UAH = 'UAH';
    const CURRENCY_CODE_UGX = 'UGX';
    const CURRENCY_CODE_USD = 'USD';
    const CURRENCY_CODE_USN = 'USN';
    const CURRENCY_CODE_USS = 'USS';
    const CURRENCY_CODE_UYI = 'UYI';
    const CURRENCY_CODE_UYU = 'UYU';
    const CURRENCY_CODE_UZS = 'UZS';
    const CURRENCY_CODE_VEF = 'VEF';
    const CURRENCY_CODE_VND = 'VND';
    const CURRENCY_CODE_VUV = 'VUV';
    const CURRENCY_CODE_WST = 'WST';
    const CURRENCY_CODE_XAF = 'XAF';
    const CURRENCY_CODE_XAG = 'XAG';
    const CURRENCY_CODE_XAU = 'XAU';
    const CURRENCY_CODE_XBA = 'XBA';
    const CURRENCY_CODE_XBB = 'XBB';
    const CURRENCY_CODE_XBC = 'XBC';
    const CURRENCY_CODE_XBD = 'XBD';
    const CURRENCY_CODE_XCD = 'XCD';
    const CURRENCY_CODE_XDR = 'XDR';
    const CURRENCY_CODE_XOF = 'XOF';
    const CURRENCY_CODE_XPD = 'XPD';
    const CURRENCY_CODE_XPF = 'XPF';
    const CURRENCY_CODE_XPT = 'XPT';
    const CURRENCY_CODE_XTS = 'XTS';
    const CURRENCY_CODE_XXX = 'XXX';
    const CURRENCY_CODE_YER = 'YER';
    const CURRENCY_CODE_ZAR = 'ZAR';
    const CURRENCY_CODE_ZMK = 'ZMK';
    const CURRENCY_CODE_ZMW = 'ZMW';
    const CURRENCY_CODE_BTC = 'BTC';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCurrencyCodeAllowableValues()
    {
        return [
            self::CURRENCY_CODE_AED,
            self::CURRENCY_CODE_AFN,
            self::CURRENCY_CODE_ALL,
            self::CURRENCY_CODE_AMD,
            self::CURRENCY_CODE_ANG,
            self::CURRENCY_CODE_AOA,
            self::CURRENCY_CODE_ARS,
            self::CURRENCY_CODE_AUD,
            self::CURRENCY_CODE_AWG,
            self::CURRENCY_CODE_AZN,
            self::CURRENCY_CODE_BAM,
            self::CURRENCY_CODE_BBD,
            self::CURRENCY_CODE_BDT,
            self::CURRENCY_CODE_BGN,
            self::CURRENCY_CODE_BHD,
            self::CURRENCY_CODE_BIF,
            self::CURRENCY_CODE_BMD,
            self::CURRENCY_CODE_BND,
            self::CURRENCY_CODE_BOB,
            self::CURRENCY_CODE_BOV,
            self::CURRENCY_CODE_BRL,
            self::CURRENCY_CODE_BSD,
            self::CURRENCY_CODE_BTN,
            self::CURRENCY_CODE_BWP,
            self::CURRENCY_CODE_BYR,
            self::CURRENCY_CODE_BZD,
            self::CURRENCY_CODE_CAD,
            self::CURRENCY_CODE_CDF,
            self::CURRENCY_CODE_CHE,
            self::CURRENCY_CODE_CHF,
            self::CURRENCY_CODE_CHW,
            self::CURRENCY_CODE_CLF,
            self::CURRENCY_CODE_CLP,
            self::CURRENCY_CODE_CNY,
            self::CURRENCY_CODE_COP,
            self::CURRENCY_CODE_COU,
            self::CURRENCY_CODE_CRC,
            self::CURRENCY_CODE_CUC,
            self::CURRENCY_CODE_CUP,
            self::CURRENCY_CODE_CVE,
            self::CURRENCY_CODE_CZK,
            self::CURRENCY_CODE_DJF,
            self::CURRENCY_CODE_DKK,
            self::CURRENCY_CODE_DOP,
            self::CURRENCY_CODE_DZD,
            self::CURRENCY_CODE_EGP,
            self::CURRENCY_CODE_ERN,
            self::CURRENCY_CODE_ETB,
            self::CURRENCY_CODE_EUR,
            self::CURRENCY_CODE_FJD,
            self::CURRENCY_CODE_FKP,
            self::CURRENCY_CODE_GBP,
            self::CURRENCY_CODE_GEL,
            self::CURRENCY_CODE_GHS,
            self::CURRENCY_CODE_GIP,
            self::CURRENCY_CODE_GMD,
            self::CURRENCY_CODE_GNF,
            self::CURRENCY_CODE_GTQ,
            self::CURRENCY_CODE_GYD,
            self::CURRENCY_CODE_HKD,
            self::CURRENCY_CODE_HNL,
            self::CURRENCY_CODE_HRK,
            self::CURRENCY_CODE_HTG,
            self::CURRENCY_CODE_HUF,
            self::CURRENCY_CODE_IDR,
            self::CURRENCY_CODE_ILS,
            self::CURRENCY_CODE_INR,
            self::CURRENCY_CODE_IQD,
            self::CURRENCY_CODE_IRR,
            self::CURRENCY_CODE_ISK,
            self::CURRENCY_CODE_JMD,
            self::CURRENCY_CODE_JOD,
            self::CURRENCY_CODE_JPY,
            self::CURRENCY_CODE_KES,
            self::CURRENCY_CODE_KGS,
            self::CURRENCY_CODE_KHR,
            self::CURRENCY_CODE_KMF,
            self::CURRENCY_CODE_KPW,
            self::CURRENCY_CODE_KRW,
            self::CURRENCY_CODE_KWD,
            self::CURRENCY_CODE_KYD,
            self::CURRENCY_CODE_KZT,
            self::CURRENCY_CODE_LAK,
            self::CURRENCY_CODE_LBP,
            self::CURRENCY_CODE_LKR,
            self::CURRENCY_CODE_LRD,
            self::CURRENCY_CODE_LSL,
            self::CURRENCY_CODE_LTL,
            self::CURRENCY_CODE_LVL,
            self::CURRENCY_CODE_LYD,
            self::CURRENCY_CODE_MAD,
            self::CURRENCY_CODE_MDL,
            self::CURRENCY_CODE_MGA,
            self::CURRENCY_CODE_MKD,
            self::CURRENCY_CODE_MMK,
            self::CURRENCY_CODE_MNT,
            self::CURRENCY_CODE_MOP,
            self::CURRENCY_CODE_MRO,
            self::CURRENCY_CODE_MUR,
            self::CURRENCY_CODE_MVR,
            self::CURRENCY_CODE_MWK,
            self::CURRENCY_CODE_MXN,
            self::CURRENCY_CODE_MXV,
            self::CURRENCY_CODE_MYR,
            self::CURRENCY_CODE_MZN,
            self::CURRENCY_CODE_NAD,
            self::CURRENCY_CODE_NGN,
            self::CURRENCY_CODE_NIO,
            self::CURRENCY_CODE_NOK,
            self::CURRENCY_CODE_NPR,
            self::CURRENCY_CODE_NZD,
            self::CURRENCY_CODE_OMR,
            self::CURRENCY_CODE_PAB,
            self::CURRENCY_CODE_PEN,
            self::CURRENCY_CODE_PGK,
            self::CURRENCY_CODE_PHP,
            self::CURRENCY_CODE_PKR,
            self::CURRENCY_CODE_PLN,
            self::CURRENCY_CODE_PYG,
            self::CURRENCY_CODE_QAR,
            self::CURRENCY_CODE_RON,
            self::CURRENCY_CODE_RSD,
            self::CURRENCY_CODE_RUB,
            self::CURRENCY_CODE_RWF,
            self::CURRENCY_CODE_SAR,
            self::CURRENCY_CODE_SBD,
            self::CURRENCY_CODE_SCR,
            self::CURRENCY_CODE_SDG,
            self::CURRENCY_CODE_SEK,
            self::CURRENCY_CODE_SGD,
            self::CURRENCY_CODE_SHP,
            self::CURRENCY_CODE_SLL,
            self::CURRENCY_CODE_SOS,
            self::CURRENCY_CODE_SRD,
            self::CURRENCY_CODE_SSP,
            self::CURRENCY_CODE_STD,
            self::CURRENCY_CODE_SVC,
            self::CURRENCY_CODE_SYP,
            self::CURRENCY_CODE_SZL,
            self::CURRENCY_CODE_THB,
            self::CURRENCY_CODE_TJS,
            self::CURRENCY_CODE_TMT,
            self::CURRENCY_CODE_TND,
            self::CURRENCY_CODE_TOP,
            self::CURRENCY_CODE_TRY,
            self::CURRENCY_CODE_TTD,
            self::CURRENCY_CODE_TWD,
            self::CURRENCY_CODE_TZS,
            self::CURRENCY_CODE_UAH,
            self::CURRENCY_CODE_UGX,
            self::CURRENCY_CODE_USD,
            self::CURRENCY_CODE_USN,
            self::CURRENCY_CODE_USS,
            self::CURRENCY_CODE_UYI,
            self::CURRENCY_CODE_UYU,
            self::CURRENCY_CODE_UZS,
            self::CURRENCY_CODE_VEF,
            self::CURRENCY_CODE_VND,
            self::CURRENCY_CODE_VUV,
            self::CURRENCY_CODE_WST,
            self::CURRENCY_CODE_XAF,
            self::CURRENCY_CODE_XAG,
            self::CURRENCY_CODE_XAU,
            self::CURRENCY_CODE_XBA,
            self::CURRENCY_CODE_XBB,
            self::CURRENCY_CODE_XBC,
            self::CURRENCY_CODE_XBD,
            self::CURRENCY_CODE_XCD,
            self::CURRENCY_CODE_XDR,
            self::CURRENCY_CODE_XOF,
            self::CURRENCY_CODE_XPD,
            self::CURRENCY_CODE_XPF,
            self::CURRENCY_CODE_XPT,
            self::CURRENCY_CODE_XTS,
            self::CURRENCY_CODE_XXX,
            self::CURRENCY_CODE_YER,
            self::CURRENCY_CODE_ZAR,
            self::CURRENCY_CODE_ZMK,
            self::CURRENCY_CODE_ZMW,
            self::CURRENCY_CODE_BTC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getCurrencyCodeAllowableValues();
        if (!in_array($this->container['currency_code'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'currency_code', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getCurrencyCodeAllowableValues();
        if (!in_array($this->container['currency_code'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets amount
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param int $amount Amount in the lowest denominated value of this Currency. E.g. in USD these are cents, in JPY they are Yen (which do not have a 'cent' concept).
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     * @param string $currency_code 
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $allowed_values = $this->getCurrencyCodeAllowableValues();
        if (!is_null($currency_code) && !in_array($currency_code, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'currency_code', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


