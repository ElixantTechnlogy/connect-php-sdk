<?php
/**
 * V1SettlementEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Square Connect API
 *
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;

/**
 * V1SettlementEntry Class Doc Comment
 *
 * @category    Class
 * @package     SquareConnect
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class V1SettlementEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'v1SettlementEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_id' => 'string',
        'type' => 'string',
        'amount_money' => '\SquareConnect\Model\V1Money',
        'fee_money' => '\SquareConnect\Model\V1Money'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_id' => null,
        'type' => null,
        'amount_money' => null,
        'fee_money' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_id' => 'payment_id',
        'type' => 'type',
        'amount_money' => 'amount_money',
        'fee_money' => 'fee_money'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'payment_id' => 'setPaymentId',
        'type' => 'setType',
        'amount_money' => 'setAmountMoney',
        'fee_money' => 'setFeeMoney'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'payment_id' => 'getPaymentId',
        'type' => 'getType',
        'amount_money' => 'getAmountMoney',
        'fee_money' => 'getFeeMoney'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_ADJUSTMENT = 'ADJUSTMENT';
    const TYPE_BALANCE_CHARGE = 'BALANCE_CHARGE';
    const TYPE_CHARGE = 'CHARGE';
    const TYPE_FREE_PROCESSING = 'FREE_PROCESSING';
    const TYPE_HOLD_ADJUSTMENT = 'HOLD_ADJUSTMENT';
    const TYPE_PAID_SERVICE_FEE = 'PAID_SERVICE_FEE';
    const TYPE_PAID_SERVICE_FEE_REFUND = 'PAID_SERVICE_FEE_REFUND';
    const TYPE_REDEMPTION_CODE = 'REDEMPTION_CODE';
    const TYPE_REFUND = 'REFUND';
    const TYPE_RETURNED_PAYOUT = 'RETURNED_PAYOUT';
    const TYPE_SQUARE_CAPITAL_ADVANCE = 'SQUARE_CAPITAL_ADVANCE';
    const TYPE_SQUARE_CAPITAL_PAYMENT = 'SQUARE_CAPITAL_PAYMENT';
    const TYPE_SQUARE_CAPITAL_REVERSED_PAYMENT = 'SQUARE_CAPITAL_REVERSED_PAYMENT';
    const TYPE_SUBSCRIPTION_FEE = 'SUBSCRIPTION_FEE';
    const TYPE_SUBSCRIPTION_FEE_REFUND = 'SUBSCRIPTION_FEE_REFUND';
    const TYPE_INCENTED_PAYMENT = 'INCENTED_PAYMENT';
    const TYPE_RETURNED_ACH_ENTRY = 'RETURNED_ACH_ENTRY';
    const TYPE_RETURNED_SQUARE_275 = 'RETURNED_SQUARE_275';
    const TYPE_SQUARE_275 = 'SQUARE_275';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ADJUSTMENT,
            self::TYPE_BALANCE_CHARGE,
            self::TYPE_CHARGE,
            self::TYPE_FREE_PROCESSING,
            self::TYPE_HOLD_ADJUSTMENT,
            self::TYPE_PAID_SERVICE_FEE,
            self::TYPE_PAID_SERVICE_FEE_REFUND,
            self::TYPE_REDEMPTION_CODE,
            self::TYPE_REFUND,
            self::TYPE_RETURNED_PAYOUT,
            self::TYPE_SQUARE_CAPITAL_ADVANCE,
            self::TYPE_SQUARE_CAPITAL_PAYMENT,
            self::TYPE_SQUARE_CAPITAL_REVERSED_PAYMENT,
            self::TYPE_SUBSCRIPTION_FEE,
            self::TYPE_SUBSCRIPTION_FEE_REFUND,
            self::TYPE_INCENTED_PAYMENT,
            self::TYPE_RETURNED_ACH_ENTRY,
            self::TYPE_RETURNED_SQUARE_275,
            self::TYPE_SQUARE_275,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amount_money'] = isset($data['amount_money']) ? $data['amount_money'] : null;
        $this->container['fee_money'] = isset($data['fee_money']) ? $data['fee_money'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets payment_id
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     * @param string $payment_id The settlement's unique identifier.
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The settlement's current status.
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount_money
     * @return \SquareConnect\Model\V1Money
     */
    public function getAmountMoney()
    {
        return $this->container['amount_money'];
    }

    /**
     * Sets amount_money
     * @param \SquareConnect\Model\V1Money $amount_money The total amount of money this entry contributes to the total settlement amount.
     * @return $this
     */
    public function setAmountMoney($amount_money)
    {
        $this->container['amount_money'] = $amount_money;

        return $this;
    }

    /**
     * Gets fee_money
     * @return \SquareConnect\Model\V1Money
     */
    public function getFeeMoney()
    {
        return $this->container['fee_money'];
    }

    /**
     * Sets fee_money
     * @param \SquareConnect\Model\V1Money $fee_money The amount of all Square fees associated with this settlement entry. This value is always negative or zero.
     * @return $this
     */
    public function setFeeMoney($fee_money)
    {
        $this->container['fee_money'] = $fee_money;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
    }
}


